
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b0  080034b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034b0  080034b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b0  080034b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000070  08003528  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003528  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c9d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019dd  00000000  00000000  00027d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f8  00000000  00000000  00029718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  00029f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d03  00000000  00000000  0002a660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007356  00000000  00000000  00041363  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080a5b  00000000  00000000  000486b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9114  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b8  00000000  00000000  000c9190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080031ec 	.word	0x080031ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080031ec 	.word	0x080031ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b095      	sub	sp, #84	; 0x54
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fd59 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f95d 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
		MX_GPIO_Init();
 800016a:	f000 f9c1 	bl	80004f0 <MX_GPIO_Init>
		MX_USART1_UART_Init();
 800016e:	f000 f995 	bl	800049c <MX_USART1_UART_Init>
		/* USER CODE BEGIN 2 */
		uint32_t SIZE_ONE_PAGE = 0x400; // розмір сторінки 1 Кб, або 1024 байта
 8000172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000176:	64fb      	str	r3, [r7, #76]	; 0x4c
		  //uint32_t ADDR_FLASH_PAGE = 0x08000000 + 64 * SIZE_ONE_PAGE; // адреса 64 сторінки 0x0800FC00
		uint32_t ADDR_FLASH_PAGE = 0x08000000 + 31 * SIZE_ONE_PAGE; // адреса 31 сторінки 0x08007C00
 8000178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800017a:	4613      	mov	r3, r2
 800017c:	015b      	lsls	r3, r3, #5
 800017e:	1a9b      	subs	r3, r3, r2
 8000180:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000184:	64bb      	str	r3, [r7, #72]	; 0x48
		size_t SIZE_uint32 = sizeof(uint32_t); // 32 біта це 4 байти
 8000186:	2304      	movs	r3, #4
 8000188:	647b      	str	r3, [r7, #68]	; 0x44
		// в одну сторінку розміром 1Кб можна записати 1024/4=256 змінних розміром 4 байти

		uint32_t val_000 = 0x01234567;
 800018a:	4b9d      	ldr	r3, [pc, #628]	; (8000400 <main+0x2a4>)
 800018c:	643b      	str	r3, [r7, #64]	; 0x40
    	uint32_t val_004 = 0x89ABCDEF;
 800018e:	4b9d      	ldr	r3, [pc, #628]	; (8000404 <main+0x2a8>)
 8000190:	63fb      	str	r3, [r7, #60]	; 0x3c
    	uint32_t val_00C = 0x01020304;
 8000192:	4b9d      	ldr	r3, [pc, #628]	; (8000408 <main+0x2ac>)
 8000194:	63bb      	str	r3, [r7, #56]	; 0x38
    	uint32_t val_3FC = 0x0000FFFF; //1024-4=1020 == 0x400-0x004=0x3FC
 8000196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800019a:	637b      	str	r3, [r7, #52]	; 0x34

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 31!!!\n\r", sizeof("\n\n\r!!!Erase page 31!!!\n\r"), 100);
 800019c:	2364      	movs	r3, #100	; 0x64
 800019e:	2219      	movs	r2, #25
 80001a0:	499a      	ldr	r1, [pc, #616]	; (800040c <main+0x2b0>)
 80001a2:	489b      	ldr	r0, [pc, #620]	; (8000410 <main+0x2b4>)
 80001a4:	f001 ff1d 	bl	8001fe2 <HAL_UART_Transmit>
    	Flash_Erase_One_Page(ADDR_FLASH_PAGE); // очищення 31 сторінки
 80001a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80001aa:	f000 f9b7 	bl	800051c <Flash_Erase_One_Page>

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 80001ae:	2364      	movs	r3, #100	; 0x64
 80001b0:	220f      	movs	r2, #15
 80001b2:	4998      	ldr	r1, [pc, #608]	; (8000414 <main+0x2b8>)
 80001b4:	4896      	ldr	r0, [pc, #600]	; (8000410 <main+0x2b4>)
 80001b6:	f001 ff14 	bl	8001fe2 <HAL_UART_Transmit>
    	// запис значень на початку і в кінці 127 сторінки
    	Flash_Write_uint32(ADDR_FLASH_PAGE + 0 * SIZE_uint32, val_000);
 80001ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80001bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80001be:	f000 fa09 	bl	80005d4 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE + 1 * SIZE_uint32, val_004);
 80001c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80001c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001c6:	4413      	add	r3, r2
 80001c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 fa02 	bl	80005d4 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE + 3 * SIZE_uint32, val_00C);
 80001d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80001d2:	4613      	mov	r3, r2
 80001d4:	005b      	lsls	r3, r3, #1
 80001d6:	441a      	add	r2, r3
 80001d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80001da:	4413      	add	r3, r2
 80001dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 f9f8 	bl	80005d4 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE + 255 * SIZE_uint32, val_3FC);
 80001e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80001e6:	4613      	mov	r3, r2
 80001e8:	021b      	lsls	r3, r3, #8
 80001ea:	1a9a      	subs	r2, r3, r2
 80001ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80001ee:	4413      	add	r3, r2
 80001f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 f9ee 	bl	80005d4 <Flash_Write_uint32>

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Erase page 30!!!\n\r", sizeof("\n!!!Erase page 30!!!\n\r"), 100);
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	2217      	movs	r2, #23
 80001fc:	4986      	ldr	r1, [pc, #536]	; (8000418 <main+0x2bc>)
 80001fe:	4884      	ldr	r0, [pc, #528]	; (8000410 <main+0x2b4>)
 8000200:	f001 feef 	bl	8001fe2 <HAL_UART_Transmit>
    	Flash_Erase_One_Page(ADDR_FLASH_PAGE - SIZE_ONE_PAGE); // очищення 30 сторінки
 8000204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000208:	1ad3      	subs	r3, r2, r3
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f986 	bl	800051c <Flash_Erase_One_Page>

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 8000210:	2364      	movs	r3, #100	; 0x64
 8000212:	220f      	movs	r2, #15
 8000214:	497f      	ldr	r1, [pc, #508]	; (8000414 <main+0x2b8>)
 8000216:	487e      	ldr	r0, [pc, #504]	; (8000410 <main+0x2b4>)
 8000218:	f001 fee3 	bl	8001fe2 <HAL_UART_Transmit>
    	// запис значень на початку і в кінці 126 сторінки
    	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x000, val_000);
 800021c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800021e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000220:	1ad3      	subs	r3, r2, r3
 8000222:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f9d5 	bl	80005d4 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x004, val_004);
 800022a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800022c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800022e:	1ad3      	subs	r3, r2, r3
 8000230:	3304      	adds	r3, #4
 8000232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f9cd 	bl	80005d4 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x00C, val_00C);
 800023a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800023c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	330c      	adds	r3, #12
 8000242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f9c5 	bl	80005d4 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x3FC, val_3FC);
 800024a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800024c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800024e:	1ad3      	subs	r3, r2, r3
 8000250:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8000254:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f9bc 	bl	80005d4 <Flash_Write_uint32>

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Read!!!\n\r", sizeof("\n!!!Read!!!\n\r"), 100);
 800025c:	2364      	movs	r3, #100	; 0x64
 800025e:	220e      	movs	r2, #14
 8000260:	496e      	ldr	r1, [pc, #440]	; (800041c <main+0x2c0>)
 8000262:	486b      	ldr	r0, [pc, #428]	; (8000410 <main+0x2b4>)
 8000264:	f001 febd 	bl	8001fe2 <HAL_UART_Transmit>
    	// читання значень з 64 сторінки Flash-пам'яті
    	uint32_t a = Flash_Read_uint32(ADDR_FLASH_PAGE + 0 * SIZE_uint32);
 8000268:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800026a:	f000 fa07 	bl	800067c <Flash_Read_uint32>
 800026e:	6338      	str	r0, [r7, #48]	; 0x30
    	uint32_t b = Flash_Read_uint32(ADDR_FLASH_PAGE + 1 * SIZE_uint32);
 8000270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000274:	4413      	add	r3, r2
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fa00 	bl	800067c <Flash_Read_uint32>
 800027c:	62f8      	str	r0, [r7, #44]	; 0x2c
    	uint32_t c = Flash_Read_uint32(ADDR_FLASH_PAGE + 3 * SIZE_uint32);
 800027e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000280:	4613      	mov	r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	441a      	add	r2, r3
 8000286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000288:	4413      	add	r3, r2
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f9f6 	bl	800067c <Flash_Read_uint32>
 8000290:	62b8      	str	r0, [r7, #40]	; 0x28
    	uint32_t d = Flash_Read_uint32(ADDR_FLASH_PAGE + 255 * SIZE_uint32);
 8000292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000294:	4613      	mov	r3, r2
 8000296:	021b      	lsls	r3, r3, #8
 8000298:	1a9a      	subs	r2, r3, r2
 800029a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800029c:	4413      	add	r3, r2
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 f9ec 	bl	800067c <Flash_Read_uint32>
 80002a4:	6278      	str	r0, [r7, #36]	; 0x24



    	// uint16_t

		uint16_t val_1 = 0x4321;
 80002a6:	f244 3321 	movw	r3, #17185	; 0x4321
 80002aa:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t val_2 = 0x89AB;
 80002ac:	f648 13ab 	movw	r3, #35243	; 0x89ab
 80002b0:	843b      	strh	r3, [r7, #32]
		uint16_t val_3 = 0x0102;
 80002b2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80002b6:	83fb      	strh	r3, [r7, #30]
		uint16_t val_4 = 0x0435;
 80002b8:	f240 4335 	movw	r3, #1077	; 0x435
 80002bc:	83bb      	strh	r3, [r7, #28]

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 31!!!\n\r", sizeof("\n\n\r!!!Erase page 31!!!\n\r"), 100);
 80002be:	2364      	movs	r3, #100	; 0x64
 80002c0:	2219      	movs	r2, #25
 80002c2:	4952      	ldr	r1, [pc, #328]	; (800040c <main+0x2b0>)
 80002c4:	4852      	ldr	r0, [pc, #328]	; (8000410 <main+0x2b4>)
 80002c6:	f001 fe8c 	bl	8001fe2 <HAL_UART_Transmit>
		Flash_Erase_One_Page(ADDR_FLASH_PAGE); // очищення 31 сторінки
 80002ca:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80002cc:	f000 f926 	bl	800051c <Flash_Erase_One_Page>

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	220f      	movs	r2, #15
 80002d4:	494f      	ldr	r1, [pc, #316]	; (8000414 <main+0x2b8>)
 80002d6:	484e      	ldr	r0, [pc, #312]	; (8000410 <main+0x2b4>)
 80002d8:	f001 fe83 	bl	8001fe2 <HAL_UART_Transmit>
		// запис значень на початку і в кінці 31 сторінки
  		Flash_Write_uint16(ADDR_FLASH_PAGE + 0 * SIZE_uint32, val_1);
 80002dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80002de:	4619      	mov	r1, r3
 80002e0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80002e2:	f000 fa0f 	bl	8000704 <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE + 1 * SIZE_uint32, val_2);
 80002e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80002e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002ea:	4413      	add	r3, r2
 80002ec:	8c3a      	ldrh	r2, [r7, #32]
 80002ee:	4611      	mov	r1, r2
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fa07 	bl	8000704 <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE + 3 * SIZE_uint32, val_3);
 80002f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80002f8:	4613      	mov	r3, r2
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	441a      	add	r2, r3
 80002fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000300:	4413      	add	r3, r2
 8000302:	8bfa      	ldrh	r2, [r7, #30]
 8000304:	4611      	mov	r1, r2
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f9fc 	bl	8000704 <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE + 255 * SIZE_uint32, val_4);
 800030c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800030e:	4613      	mov	r3, r2
 8000310:	021b      	lsls	r3, r3, #8
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000316:	4413      	add	r3, r2
 8000318:	8bba      	ldrh	r2, [r7, #28]
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f9f1 	bl	8000704 <Flash_Write_uint16>

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Erase page 30!!!\n\r", sizeof("\n!!!Erase page 30!!!\n\r"), 100);
 8000322:	2364      	movs	r3, #100	; 0x64
 8000324:	2217      	movs	r2, #23
 8000326:	493c      	ldr	r1, [pc, #240]	; (8000418 <main+0x2bc>)
 8000328:	4839      	ldr	r0, [pc, #228]	; (8000410 <main+0x2b4>)
 800032a:	f001 fe5a 	bl	8001fe2 <HAL_UART_Transmit>
		Flash_Erase_One_Page(ADDR_FLASH_PAGE - SIZE_ONE_PAGE); // очищення 30 сторінки
 800032e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f8f1 	bl	800051c <Flash_Erase_One_Page>

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 800033a:	2364      	movs	r3, #100	; 0x64
 800033c:	220f      	movs	r2, #15
 800033e:	4935      	ldr	r1, [pc, #212]	; (8000414 <main+0x2b8>)
 8000340:	4833      	ldr	r0, [pc, #204]	; (8000410 <main+0x2b4>)
 8000342:	f001 fe4e 	bl	8001fe2 <HAL_UART_Transmit>
		// запис значень на початку і в кінці 30 сторінки
  		Flash_Write_uint16(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x000, val_1);
 8000346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800034a:	1ad3      	subs	r3, r2, r3
 800034c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f9d7 	bl	8000704 <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x004, val_2);
 8000356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	3304      	adds	r3, #4
 800035e:	8c3a      	ldrh	r2, [r7, #32]
 8000360:	4611      	mov	r1, r2
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f9ce 	bl	8000704 <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x00C, val_3);
 8000368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800036a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	330c      	adds	r3, #12
 8000370:	8bfa      	ldrh	r2, [r7, #30]
 8000372:	4611      	mov	r1, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f9c5 	bl	8000704 <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x3FC, val_4);
 800037a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800037c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8000384:	8bba      	ldrh	r2, [r7, #28]
 8000386:	4611      	mov	r1, r2
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f9bb 	bl	8000704 <Flash_Write_uint16>

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Read!!!\n\r", sizeof("\n!!!Read!!!\n\r"), 100);
 800038e:	2364      	movs	r3, #100	; 0x64
 8000390:	220e      	movs	r2, #14
 8000392:	4922      	ldr	r1, [pc, #136]	; (800041c <main+0x2c0>)
 8000394:	481e      	ldr	r0, [pc, #120]	; (8000410 <main+0x2b4>)
 8000396:	f001 fe24 	bl	8001fe2 <HAL_UART_Transmit>
		// читання значень з 30 сторінки Flash-пам'яті
  		uint16_t a2 = Flash_Read_uint16(ADDR_FLASH_PAGE + 0 * SIZE_uint32);
 800039a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800039c:	f000 fa08 	bl	80007b0 <Flash_Read_uint16>
 80003a0:	4603      	mov	r3, r0
 80003a2:	837b      	strh	r3, [r7, #26]
  		uint16_t b2 = Flash_Read_uint16(ADDR_FLASH_PAGE + 1 * SIZE_uint32);
 80003a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80003a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003a8:	4413      	add	r3, r2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fa00 	bl	80007b0 <Flash_Read_uint16>
 80003b0:	4603      	mov	r3, r0
 80003b2:	833b      	strh	r3, [r7, #24]
  		uint16_t c2 = Flash_Read_uint16(ADDR_FLASH_PAGE + 3 * SIZE_uint32);
 80003b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80003b6:	4613      	mov	r3, r2
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	441a      	add	r2, r3
 80003bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003be:	4413      	add	r3, r2
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f9f5 	bl	80007b0 <Flash_Read_uint16>
 80003c6:	4603      	mov	r3, r0
 80003c8:	82fb      	strh	r3, [r7, #22]
  		uint16_t d2 = Flash_Read_uint16(ADDR_FLASH_PAGE + 255 * SIZE_uint32);
 80003ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80003cc:	4613      	mov	r3, r2
 80003ce:	021b      	lsls	r3, r3, #8
 80003d0:	1a9a      	subs	r2, r3, r2
 80003d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003d4:	4413      	add	r3, r2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f9ea 	bl	80007b0 <Flash_Read_uint16>
 80003dc:	4603      	mov	r3, r0
 80003de:	82bb      	strh	r3, [r7, #20]


		uint8_t arr[] = "Test by Bloh";
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <main+0x2c4>)
 80003e2:	1d3c      	adds	r4, r7, #4
 80003e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003e6:	c407      	stmia	r4!, {r0, r1, r2}
 80003e8:	7023      	strb	r3, [r4, #0]
		Flash_Write_Byte_Array(arr, 56);
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2138      	movs	r1, #56	; 0x38
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fa26 	bl	8000840 <Flash_Write_Byte_Array>
		Flash_Read_By_Byte(ADDR_FLASH_PAGE, 56);
 80003f4:	2138      	movs	r1, #56	; 0x38
 80003f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80003f8:	f000 fab0 	bl	800095c <Flash_Read_By_Byte>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <main+0x2a0>
 80003fe:	bf00      	nop
 8000400:	01234567 	.word	0x01234567
 8000404:	89abcdef 	.word	0x89abcdef
 8000408:	01020304 	.word	0x01020304
 800040c:	08003204 	.word	0x08003204
 8000410:	20000098 	.word	0x20000098
 8000414:	08003220 	.word	0x08003220
 8000418:	08003230 	.word	0x08003230
 800041c:	08003248 	.word	0x08003248
 8000420:	08003258 	.word	0x08003258

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b090      	sub	sp, #64	; 0x40
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0318 	add.w	r3, r7, #24
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fa8c 	bl	8002950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000446:	2302      	movs	r3, #2
 8000448:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044a:	2301      	movs	r3, #1
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044e:	2310      	movs	r3, #16
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000452:	2300      	movs	r3, #0
 8000454:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000456:	f107 0318 	add.w	r3, r7, #24
 800045a:	4618      	mov	r0, r3
 800045c:	f001 f958 	bl	8001710 <HAL_RCC_OscConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000466:	f000 fab9 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046a:	230f      	movs	r3, #15
 800046c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fbc4 	bl	8001c10 <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800048e:	f000 faa5 	bl	80009dc <Error_Handler>
  }
}
 8000492:	bf00      	nop
 8000494:	3740      	adds	r7, #64	; 0x40
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <MX_USART1_UART_Init+0x50>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004d4:	f001 fd38 	bl	8001f48 <HAL_UART_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004de:	f000 fa7d 	bl	80009dc <Error_Handler>
   *
   */

  /* USER CODE END USART1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000098 	.word	0x20000098
 80004ec:	40013800 	.word	0x40013800

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_GPIO_Init+0x28>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <MX_GPIO_Init+0x28>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <MX_GPIO_Init+0x28>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <Flash_Erase_One_Page>:

/* USER CODE BEGIN 4 */
void Flash_Erase_One_Page(uint32_t MYADDR)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b09a      	sub	sp, #104	; 0x68
 8000520:	af02      	add	r7, sp, #8
 8000522:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct; // структура для очищення флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // очищення сторінками, FLASH_TYPEERASE_MASSERASE - очищення всього флеша
 8000524:	2300      	movs	r3, #0
 8000526:	64fb      	str	r3, [r7, #76]	; 0x4c
	EraseInitStruct.PageAddress = MYADDR; // адреса сторінки;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	657b      	str	r3, [r7, #84]	; 0x54
	EraseInitStruct.NbPages = 1;          // кількість сторінок для очищення
 800052c:	2301      	movs	r3, #1
 800052e:	65bb      	str	r3, [r7, #88]	; 0x58
	//EraseInitStruct.Banks = FLASH_BANK_1; // для більш потужник МК ніж STM32F103

	uint32_t page_error = 0; // змінна в яку запишеться адреса сторінки, при невдалому очищенні
 8000530:	2300      	movs	r3, #0
 8000532:	64bb      	str	r3, [r7, #72]	; 0x48

	char str[64] = { 0, };
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2240      	movs	r2, #64	; 0x40
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fa07 	bl	8002950 <memset>

	//////// ОЧИЩЕННЯ Flash-пам'яті ////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 8000542:	f000 fdf9 	bl	8001138 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8000546:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800054a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800054e:	4611      	mov	r1, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fee3 	bl	800131c <HAL_FLASHEx_Erase>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d017      	beq.n	800058c <Flash_Erase_One_Page+0x70>
	{
		// сталась помилка при очищенні сторінки
		uint32_t er = HAL_FLASH_GetError();
 800055c:	f000 fe22 	bl	80011a4 <HAL_FLASH_GetError>
 8000560:	65f8      	str	r0, [r7, #92]	; 0x5c
		snprintf(str, 64, "Error Flash_Erase(): %lu\n\r", er);
 8000562:	f107 0008 	add.w	r0, r7, #8
 8000566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <Flash_Erase_One_Page+0xac>)
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	f002 f9f8 	bl	8002960 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fde9 	bl	800014c <strlen>
 800057a:	4603      	mov	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	f107 0108 	add.w	r1, r7, #8
 8000582:	2364      	movs	r3, #100	; 0x64
 8000584:	4811      	ldr	r0, [pc, #68]	; (80005cc <Flash_Erase_One_Page+0xb0>)
 8000586:	f001 fd2c 	bl	8001fe2 <HAL_UART_Transmit>
		while (1)
 800058a:	e7fe      	b.n	800058a <Flash_Erase_One_Page+0x6e>
		{
		}
	}

	// очищення сторінки виконане успішно
	snprintf(str, 64, "Erase Flash from address 0x%08lX to address 0x%08lX OK\n\r", MYADDR, MYADDR+0x400-1);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000592:	f107 0008 	add.w	r0, r7, #8
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <Flash_Erase_One_Page+0xb4>)
 800059c:	2140      	movs	r1, #64	; 0x40
 800059e:	f002 f9df 	bl	8002960 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fdd0 	bl	800014c <strlen>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	f107 0108 	add.w	r1, r7, #8
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <Flash_Erase_One_Page+0xb0>)
 80005b8:	f001 fd13 	bl	8001fe2 <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 80005bc:	f000 fde2 	bl	8001184 <HAL_FLASH_Lock>
}
 80005c0:	bf00      	nop
 80005c2:	3760      	adds	r7, #96	; 0x60
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	08003268 	.word	0x08003268
 80005cc:	20000098 	.word	0x20000098
 80005d0:	08003284 	.word	0x08003284

080005d4 <Flash_Write_uint32>:

void Flash_Write_uint32(uint32_t MYADDR, uint32_t val)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b097      	sub	sp, #92	; 0x5c
 80005d8:	af02      	add	r7, sp, #8
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	char str[64] = { 0, };
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2240      	movs	r2, #64	; 0x40
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f9b2 	bl	8002950 <memset>

	///////////// ЗАПИС у Flash-пам'ять ///////////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 80005ec:	f000 fda4 	bl	8001138 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, MYADDR, val) != HAL_OK)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	f04f 0400 	mov.w	r4, #0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4623      	mov	r3, r4
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	2002      	movs	r0, #2
 80005fe:	f000 fd2b 	bl	8001058 <HAL_FLASH_Program>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d017      	beq.n	8000638 <Flash_Write_uint32+0x64>
	{
		uint32_t er = HAL_FLASH_GetError();
 8000608:	f000 fdcc 	bl	80011a4 <HAL_FLASH_GetError>
 800060c:	64f8      	str	r0, [r7, #76]	; 0x4c
		snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 800060e:	f107 000c 	add.w	r0, r7, #12
 8000612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000614:	4a16      	ldr	r2, [pc, #88]	; (8000670 <Flash_Write_uint32+0x9c>)
 8000616:	2140      	movs	r1, #64	; 0x40
 8000618:	f002 f9a2 	bl	8002960 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fd93 	bl	800014c <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	f107 010c 	add.w	r1, r7, #12
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <Flash_Write_uint32+0xa0>)
 8000632:	f001 fcd6 	bl	8001fe2 <HAL_UART_Transmit>
		while (1)
 8000636:	e7fe      	b.n	8000636 <Flash_Write_uint32+0x62>
		{
		}
	}

	snprintf(str, 64, "Write 32 bits (Hex: 0x%08lX) to address 0x%08lX OK\n\r", val, MYADDR);
 8000638:	f107 000c 	add.w	r0, r7, #12
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <Flash_Write_uint32+0xa4>)
 8000644:	2140      	movs	r1, #64	; 0x40
 8000646:	f002 f98b 	bl	8002960 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fd7c 	bl	800014c <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	f107 010c 	add.w	r1, r7, #12
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <Flash_Write_uint32+0xa0>)
 8000660:	f001 fcbf 	bl	8001fe2 <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 8000664:	f000 fd8e 	bl	8001184 <HAL_FLASH_Lock>
}
 8000668:	bf00      	nop
 800066a:	3754      	adds	r7, #84	; 0x54
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	080032c0 	.word	0x080032c0
 8000674:	20000098 	.word	0x20000098
 8000678:	080032dc 	.word	0x080032dc

0800067c <Flash_Read_uint32>:

uint32_t Flash_Read_uint32(uint32_t MYADDR)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	; 0x58
 8000680:	af02      	add	r7, sp, #8
 8000682:	6078      	str	r0, [r7, #4]
	char str[64] = { 0, };
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2240      	movs	r2, #64	; 0x40
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f002 f95f 	bl	8002950 <memset>

	/////////////// ЧИТАЄМО Flash-пам'ять ///////////////////
	uint32_t dig32 = *(uint32_t*) MYADDR; // читання числа за його адресою
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c

	snprintf(str, 64, "Read 32 bits (Dec: %lu \tHex: 0x%08lX)", dig32, dig32);
 8000698:	f107 000c 	add.w	r0, r7, #12
 800069c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <Flash_Read_uint32+0x7c>)
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	f002 f95b 	bl	8002960 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd4c 	bl	800014c <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f107 010c 	add.w	r1, r7, #12
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <Flash_Read_uint32+0x80>)
 80006c0:	f001 fc8f 	bl	8001fe2 <HAL_UART_Transmit>
	snprintf(str, 64, " from address 0x%08lX \n\r", MYADDR);
 80006c4:	f107 000c 	add.w	r0, r7, #12
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <Flash_Read_uint32+0x84>)
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	f002 f947 	bl	8002960 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd38 	bl	800014c <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f107 010c 	add.w	r1, r7, #12
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <Flash_Read_uint32+0x80>)
 80006e8:	f001 fc7b 	bl	8001fe2 <HAL_UART_Transmit>

	return dig32;
 80006ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	08003314 	.word	0x08003314
 80006fc:	20000098 	.word	0x20000098
 8000700:	0800333c 	.word	0x0800333c

08000704 <Flash_Write_uint16>:

void Flash_Write_uint16(uint32_t MYADDR, uint16_t val)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b097      	sub	sp, #92	; 0x5c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
	char str[64] = { 0, };
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2240      	movs	r2, #64	; 0x40
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f919 	bl	8002950 <memset>

	///////////// ЗАПИС у Flash-пам'ять ///////////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 800071e:	f000 fd0b 	bl	8001138 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, MYADDR, val) != HAL_OK)
 8000722:	887b      	ldrh	r3, [r7, #2]
 8000724:	f04f 0400 	mov.w	r4, #0
 8000728:	461a      	mov	r2, r3
 800072a:	4623      	mov	r3, r4
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	2001      	movs	r0, #1
 8000730:	f000 fc92 	bl	8001058 <HAL_FLASH_Program>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d017      	beq.n	800076a <Flash_Write_uint16+0x66>
	{
		uint32_t er = HAL_FLASH_GetError();
 800073a:	f000 fd33 	bl	80011a4 <HAL_FLASH_GetError>
 800073e:	64f8      	str	r0, [r7, #76]	; 0x4c
		snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 8000740:	f107 000c 	add.w	r0, r7, #12
 8000744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <Flash_Write_uint16+0xa0>)
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	f002 f909 	bl	8002960 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fcfa 	bl	800014c <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	f107 010c 	add.w	r1, r7, #12
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <Flash_Write_uint16+0xa4>)
 8000764:	f001 fc3d 	bl	8001fe2 <HAL_UART_Transmit>
		while (1)
 8000768:	e7fe      	b.n	8000768 <Flash_Write_uint16+0x64>
		{
		}
	}

	snprintf(str, 64, "Write 16 bits (Hex: 0x%08lX) to address 0x%08lX OK\n\r", val, MYADDR);
 800076a:	887a      	ldrh	r2, [r7, #2]
 800076c:	f107 000c 	add.w	r0, r7, #12
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4613      	mov	r3, r2
 8000776:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <Flash_Write_uint16+0xa8>)
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	f002 f8f1 	bl	8002960 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fce2 	bl	800014c <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	f107 010c 	add.w	r1, r7, #12
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <Flash_Write_uint16+0xa4>)
 8000794:	f001 fc25 	bl	8001fe2 <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 8000798:	f000 fcf4 	bl	8001184 <HAL_FLASH_Lock>
}
 800079c:	bf00      	nop
 800079e:	3754      	adds	r7, #84	; 0x54
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	080032c0 	.word	0x080032c0
 80007a8:	20000098 	.word	0x20000098
 80007ac:	08003358 	.word	0x08003358

080007b0 <Flash_Read_uint16>:

uint16_t Flash_Read_uint16(uint32_t MYADDR)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b096      	sub	sp, #88	; 0x58
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	6078      	str	r0, [r7, #4]
	char str[64] = { 0, };
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2240      	movs	r2, #64	; 0x40
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 f8c5 	bl	8002950 <memset>

	/////////////// ЧИТАЄМО Flash-пам'ять ///////////////////
	uint16_t dig16 = *(uint16_t*) MYADDR; // читання числа за його адресою
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	snprintf(str, 64, "Read 16 bits (Dec: %lu \tHex: 0x%08lX)", dig16, dig16);
 80007ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80007d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80007d6:	f107 000c 	add.w	r0, r7, #12
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	4613      	mov	r3, r2
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <Flash_Read_uint16+0x84>)
 80007e0:	2140      	movs	r1, #64	; 0x40
 80007e2:	f002 f8bd 	bl	8002960 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fcae 	bl	800014c <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	f107 010c 	add.w	r1, r7, #12
 80007f8:	2364      	movs	r3, #100	; 0x64
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <Flash_Read_uint16+0x88>)
 80007fc:	f001 fbf1 	bl	8001fe2 <HAL_UART_Transmit>
	snprintf(str, 64, " from address 0x%08lX \n\r", MYADDR);
 8000800:	f107 000c 	add.w	r0, r7, #12
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a0d      	ldr	r2, [pc, #52]	; (800083c <Flash_Read_uint16+0x8c>)
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	f002 f8a9 	bl	8002960 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fc9a 	bl	800014c <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	f107 010c 	add.w	r1, r7, #12
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <Flash_Read_uint16+0x88>)
 8000824:	f001 fbdd 	bl	8001fe2 <HAL_UART_Transmit>

	return dig16;
 8000828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 800082c:	4618      	mov	r0, r3
 800082e:	3750      	adds	r7, #80	; 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08003390 	.word	0x08003390
 8000838:	20000098 	.word	0x20000098
 800083c:	0800333c 	.word	0x0800333c

08000840 <Flash_Write_Byte_Array>:
	return dig64;
}


void Flash_Write_Byte_Array(uint8_t phraze[], int byteCount)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b09b      	sub	sp, #108	; 0x6c
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	size_t SIZE_uint32 = sizeof(uint32_t);
 800084a:	2304      	movs	r3, #4
 800084c:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t SIZE_ONE_PAGE = 0x400;
 800084e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t ADDR_FLASH_PAGE = 0x08000000 + 31 * SIZE_ONE_PAGE;
 8000854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000856:	4613      	mov	r3, r2
 8000858:	015b      	lsls	r3, r3, #5
 800085a:	1a9b      	subs	r3, r3, r2
 800085c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000860:	653b      	str	r3, [r7, #80]	; 0x50

	HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 31!!!\n\r", sizeof("\n\n\r!!!Erase page 31!!!\n\r"), 100);
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	2219      	movs	r2, #25
 8000866:	4938      	ldr	r1, [pc, #224]	; (8000948 <Flash_Write_Byte_Array+0x108>)
 8000868:	4838      	ldr	r0, [pc, #224]	; (800094c <Flash_Write_Byte_Array+0x10c>)
 800086a:	f001 fbba 	bl	8001fe2 <HAL_UART_Transmit>
	Flash_Erase_One_Page(ADDR_FLASH_PAGE);
 800086e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000870:	f7ff fe54 	bl	800051c <Flash_Erase_One_Page>

	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	220f      	movs	r2, #15
 8000878:	4935      	ldr	r1, [pc, #212]	; (8000950 <Flash_Write_Byte_Array+0x110>)
 800087a:	4834      	ldr	r0, [pc, #208]	; (800094c <Flash_Write_Byte_Array+0x10c>)
 800087c:	f001 fbb1 	bl	8001fe2 <HAL_UART_Transmit>

	for(int i = 0; i < byteCount; i++)
 8000880:	2300      	movs	r3, #0
 8000882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000884:	e057      	b.n	8000936 <Flash_Write_Byte_Array+0xf6>
	{
		char str[64] = { 0, };
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	2240      	movs	r2, #64	; 0x40
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f002 f85e 	bl	8002950 <memset>
		uint32_t currentAddress = ADDR_FLASH_PAGE + i * SIZE_uint32;
 8000894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000898:	fb02 f303 	mul.w	r3, r2, r3
 800089c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800089e:	4413      	add	r3, r2
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
		HAL_FLASH_Unlock();
 80008a2:	f000 fc49 	bl	8001138 <HAL_FLASH_Unlock>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAddress, phraze[i]) != HAL_OK)
 80008a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f04f 0400 	mov.w	r4, #0
 80008b4:	461a      	mov	r2, r3
 80008b6:	4623      	mov	r3, r4
 80008b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fbcc 	bl	8001058 <HAL_FLASH_Program>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d017      	beq.n	80008f6 <Flash_Write_Byte_Array+0xb6>
		{
			uint32_t er = HAL_FLASH_GetError();
 80008c6:	f000 fc6d 	bl	80011a4 <HAL_FLASH_GetError>
 80008ca:	64b8      	str	r0, [r7, #72]	; 0x48
			snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 80008cc:	f107 0008 	add.w	r0, r7, #8
 80008d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008d2:	4a20      	ldr	r2, [pc, #128]	; (8000954 <Flash_Write_Byte_Array+0x114>)
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	f002 f843 	bl	8002960 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fc34 	bl	800014c <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	f107 0108 	add.w	r1, r7, #8
 80008ec:	2364      	movs	r3, #100	; 0x64
 80008ee:	4817      	ldr	r0, [pc, #92]	; (800094c <Flash_Write_Byte_Array+0x10c>)
 80008f0:	f001 fb77 	bl	8001fe2 <HAL_UART_Transmit>
			while (1) {}
 80008f4:	e7fe      	b.n	80008f4 <Flash_Write_Byte_Array+0xb4>
		}

		snprintf(str, 64, "Write char (Hex: 0x%08lX) to address 0x%08lX OK\n\r",  phraze[i], currentAddress);
 80008f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	f107 0008 	add.w	r0, r7, #8
 8000904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	4613      	mov	r3, r2
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <Flash_Write_Byte_Array+0x118>)
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	f002 f827 	bl	8002960 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fc18 	bl	800014c <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	b29a      	uxth	r2, r3
 8000920:	f107 0108 	add.w	r1, r7, #8
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	4809      	ldr	r0, [pc, #36]	; (800094c <Flash_Write_Byte_Array+0x10c>)
 8000928:	f001 fb5b 	bl	8001fe2 <HAL_UART_Transmit>

		HAL_FLASH_Lock();
 800092c:	f000 fc2a 	bl	8001184 <HAL_FLASH_Lock>
	for(int i = 0; i < byteCount; i++)
 8000930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000932:	3301      	adds	r3, #1
 8000934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000936:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	429a      	cmp	r2, r3
 800093c:	dba3      	blt.n	8000886 <Flash_Write_Byte_Array+0x46>
	}
}
 800093e:	bf00      	nop
 8000940:	3764      	adds	r7, #100	; 0x64
 8000942:	46bd      	mov	sp, r7
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	bf00      	nop
 8000948:	08003204 	.word	0x08003204
 800094c:	20000098 	.word	0x20000098
 8000950:	08003220 	.word	0x08003220
 8000954:	080032c0 	.word	0x080032c0
 8000958:	08003418 	.word	0x08003418

0800095c <Flash_Read_By_Byte>:

void Flash_Read_By_Byte(uint32_t address, int byteCount)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b096      	sub	sp, #88	; 0x58
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
	size_t SIZE_uint32 = sizeof(uint32_t);
 8000966:	2304      	movs	r3, #4
 8000968:	653b      	str	r3, [r7, #80]	; 0x50
	char str[64] = { 0, };
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2240      	movs	r2, #64	; 0x40
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f001 ffec 	bl	8002950 <memset>

	for(int i = 0; i < byteCount; i++)
 8000978:	2300      	movs	r3, #0
 800097a:	657b      	str	r3, [r7, #84]	; 0x54
 800097c:	e022      	b.n	80009c4 <Flash_Read_By_Byte+0x68>
	{
		uint32_t currentAddress = address + i * SIZE_uint32;
 800097e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint16_t value = *(uint16_t*) currentAddress;
 800098c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

		sprintf(str, "%c", value);
 8000994:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	490d      	ldr	r1, [pc, #52]	; (80009d4 <Flash_Read_By_Byte+0x78>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 f812 	bl	80029c8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fbcf 	bl	800014c <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	f107 0108 	add.w	r1, r7, #8
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <Flash_Read_By_Byte+0x7c>)
 80009ba:	f001 fb12 	bl	8001fe2 <HAL_UART_Transmit>
	for(int i = 0; i < byteCount; i++)
 80009be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009c0:	3301      	adds	r3, #1
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
 80009c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbd8      	blt.n	800097e <Flash_Read_By_Byte+0x22>
	}

}
 80009cc:	bf00      	nop
 80009ce:	3758      	adds	r7, #88	; 0x58
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	0800344c 	.word	0x0800344c
 80009d8:	20000098 	.word	0x20000098

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <Error_Handler+0x6>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_MspInit+0x5c>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <HAL_MspInit+0x5c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_MspInit+0x5c>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x5c>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_MspInit+0x5c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x5c>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_MspInit+0x60>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_MspInit+0x60>)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010000 	.word	0x40010000

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <HAL_UART_MspInit+0x9c>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d139      	bne.n	8000adc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480f      	ldr	r0, [pc, #60]	; (8000aec <HAL_UART_MspInit+0xa4>)
 8000aae:	f000 fcdd 	bl	800146c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_UART_MspInit+0xa4>)
 8000ac8:	f000 fcd0 	bl	800146c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2025      	movs	r0, #37	; 0x25
 8000ad2:	f000 f9da 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ad6:	2025      	movs	r0, #37	; 0x25
 8000ad8:	f000 f9f3 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40013800 	.word	0x40013800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010800 	.word	0x40010800

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b36:	f000 f8b5 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <USART1_IRQHandler+0x10>)
 8000b46:	f001 fadf 	bl	8002108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000098 	.word	0x20000098

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d207      	bcs.n	8000b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b84:	f001 feba 	bl	80028fc <__errno>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e009      	b.n	8000ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <_sbrk+0x64>)
 8000ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20002800 	.word	0x20002800
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	2000008c 	.word	0x2000008c
 8000bbc:	20000108 	.word	0x20000108

08000bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	; (8000c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bf2:	f7ff ffe5 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f001 fe87 	bl	8002908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfa:	f7ff faaf 	bl	800015c <main>
  bx lr
 8000bfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c08:	080034b8 	.word	0x080034b8
  ldr r2, =_sbss
 8000c0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c10:	20000104 	.word	0x20000104

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x28>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x28>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f923 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fed6 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f93b 	bl	8000ede <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f903 	bl	8000e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_IncTick+0x1c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	200000dc 	.word	0x200000dc

08000cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <HAL_GetTick+0x10>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	200000dc 	.word	0x200000dc

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4906      	ldr	r1, [pc, #24]	; (8000d74 <__NVIC_EnableIRQ+0x34>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff90 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff2d 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff42 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff90 	bl	8000dcc <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5f 	bl	8000d78 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff35 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa2 	bl	8000e30 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d008      	beq.n	8000f1e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2204      	movs	r2, #4
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e020      	b.n	8000f60 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 020e 	bic.w	r2, r2, #14
 8000f2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0201 	bic.w	r2, r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d005      	beq.n	8000f8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2204      	movs	r2, #4
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e051      	b.n	8001032 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 020e 	bic.w	r2, r2, #14
 8000f9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0201 	bic.w	r2, r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a22      	ldr	r2, [pc, #136]	; (800103c <HAL_DMA_Abort_IT+0xd0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d029      	beq.n	800100c <HAL_DMA_Abort_IT+0xa0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <HAL_DMA_Abort_IT+0xd4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d022      	beq.n	8001008 <HAL_DMA_Abort_IT+0x9c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <HAL_DMA_Abort_IT+0xd8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d01a      	beq.n	8001002 <HAL_DMA_Abort_IT+0x96>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1d      	ldr	r2, [pc, #116]	; (8001048 <HAL_DMA_Abort_IT+0xdc>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d012      	beq.n	8000ffc <HAL_DMA_Abort_IT+0x90>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <HAL_DMA_Abort_IT+0xe0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d00a      	beq.n	8000ff6 <HAL_DMA_Abort_IT+0x8a>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <HAL_DMA_Abort_IT+0xe4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d102      	bne.n	8000ff0 <HAL_DMA_Abort_IT+0x84>
 8000fea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fee:	e00e      	b.n	800100e <HAL_DMA_Abort_IT+0xa2>
 8000ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ff4:	e00b      	b.n	800100e <HAL_DMA_Abort_IT+0xa2>
 8000ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffa:	e008      	b.n	800100e <HAL_DMA_Abort_IT+0xa2>
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	e005      	b.n	800100e <HAL_DMA_Abort_IT+0xa2>
 8001002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001006:	e002      	b.n	800100e <HAL_DMA_Abort_IT+0xa2>
 8001008:	2310      	movs	r3, #16
 800100a:	e000      	b.n	800100e <HAL_DMA_Abort_IT+0xa2>
 800100c:	2301      	movs	r3, #1
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <HAL_DMA_Abort_IT+0xe8>)
 8001010:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	4798      	blx	r3
    } 
  }
  return status;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020008 	.word	0x40020008
 8001040:	4002001c 	.word	0x4002001c
 8001044:	40020030 	.word	0x40020030
 8001048:	40020044 	.word	0x40020044
 800104c:	40020058 	.word	0x40020058
 8001050:	4002006c 	.word	0x4002006c
 8001054:	40020000 	.word	0x40020000

08001058 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_FLASH_Program+0xd8>)
 8001074:	7e1b      	ldrb	r3, [r3, #24]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_FLASH_Program+0x26>
 800107a:	2302      	movs	r3, #2
 800107c:	e054      	b.n	8001128 <HAL_FLASH_Program+0xd0>
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_FLASH_Program+0xd8>)
 8001080:	2201      	movs	r2, #1
 8001082:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001084:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001088:	f000 f8b2 	bl	80011f0 <FLASH_WaitForLastOperation>
 800108c:	4603      	mov	r3, r0
 800108e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d144      	bne.n	8001120 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d102      	bne.n	80010a2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800109c:	2301      	movs	r3, #1
 800109e:	757b      	strb	r3, [r7, #21]
 80010a0:	e007      	b.n	80010b2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d102      	bne.n	80010ae <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80010a8:	2302      	movs	r3, #2
 80010aa:	757b      	strb	r3, [r7, #21]
 80010ac:	e001      	b.n	80010b2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80010ae:	2304      	movs	r3, #4
 80010b0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	75bb      	strb	r3, [r7, #22]
 80010b6:	e02d      	b.n	8001114 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80010b8:	7dbb      	ldrb	r3, [r7, #22]
 80010ba:	005a      	lsls	r2, r3, #1
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	eb02 0c03 	add.w	ip, r2, r3
 80010c2:	7dbb      	ldrb	r3, [r7, #22]
 80010c4:	0119      	lsls	r1, r3, #4
 80010c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ca:	f1c1 0620 	rsb	r6, r1, #32
 80010ce:	f1a1 0020 	sub.w	r0, r1, #32
 80010d2:	fa22 f401 	lsr.w	r4, r2, r1
 80010d6:	fa03 f606 	lsl.w	r6, r3, r6
 80010da:	4334      	orrs	r4, r6
 80010dc:	fa23 f000 	lsr.w	r0, r3, r0
 80010e0:	4304      	orrs	r4, r0
 80010e2:	fa23 f501 	lsr.w	r5, r3, r1
 80010e6:	b2a3      	uxth	r3, r4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4660      	mov	r0, ip
 80010ec:	f000 f864 	bl	80011b8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010f4:	f000 f87c 	bl	80011f0 <FLASH_WaitForLastOperation>
 80010f8:	4603      	mov	r3, r0
 80010fa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_FLASH_Program+0xdc>)
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <HAL_FLASH_Program+0xdc>)
 8001102:	f023 0301 	bic.w	r3, r3, #1
 8001106:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d107      	bne.n	800111e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800110e:	7dbb      	ldrb	r3, [r7, #22]
 8001110:	3301      	adds	r3, #1
 8001112:	75bb      	strb	r3, [r7, #22]
 8001114:	7dba      	ldrb	r2, [r7, #22]
 8001116:	7d7b      	ldrb	r3, [r7, #21]
 8001118:	429a      	cmp	r2, r3
 800111a:	d3cd      	bcc.n	80010b8 <HAL_FLASH_Program+0x60>
 800111c:	e000      	b.n	8001120 <HAL_FLASH_Program+0xc8>
      {
        break;
 800111e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_FLASH_Program+0xd8>)
 8001122:	2200      	movs	r2, #0
 8001124:	761a      	strb	r2, [r3, #24]

  return status;
 8001126:	7dfb      	ldrb	r3, [r7, #23]
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001130:	200000e0 	.word	0x200000e0
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_FLASH_Unlock+0x40>)
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00d      	beq.n	800116a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_FLASH_Unlock+0x40>)
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_FLASH_Unlock+0x44>)
 8001152:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_FLASH_Unlock+0x40>)
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_FLASH_Unlock+0x48>)
 8001158:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_FLASH_Unlock+0x40>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800116a:	79fb      	ldrb	r3, [r7, #7]
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40022000 	.word	0x40022000
 800117c:	45670123 	.word	0x45670123
 8001180:	cdef89ab 	.word	0xcdef89ab

08001184 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_FLASH_Lock+0x1c>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_FLASH_Lock+0x1c>)
 800118e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001192:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <HAL_FLASH_GetError+0x10>)
 80011aa:	69db      	ldr	r3, [r3, #28]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	200000e0 	.word	0x200000e0

080011b8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <FLASH_Program_HalfWord+0x30>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <FLASH_Program_HalfWord+0x34>)
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <FLASH_Program_HalfWord+0x34>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	887a      	ldrh	r2, [r7, #2]
 80011da:	801a      	strh	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200000e0 	.word	0x200000e0
 80011ec:	40022000 	.word	0x40022000

080011f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7ff fd66 	bl	8000cc8 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80011fe:	e010      	b.n	8001222 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001206:	d00c      	beq.n	8001222 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <FLASH_WaitForLastOperation+0x2e>
 800120e:	f7ff fd5b 	bl	8000cc8 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d201      	bcs.n	8001222 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e025      	b.n	800126e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <FLASH_WaitForLastOperation+0x88>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1e8      	bne.n	8001200 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <FLASH_WaitForLastOperation+0x88>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <FLASH_WaitForLastOperation+0x88>)
 800123c:	2220      	movs	r2, #32
 800123e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <FLASH_WaitForLastOperation+0x88>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10b      	bne.n	8001264 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <FLASH_WaitForLastOperation+0x88>)
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <FLASH_WaitForLastOperation+0x88>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001264:	f000 f80a 	bl	800127c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <FLASH_SetErrorCode+0x98>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <FLASH_SetErrorCode+0x9c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <FLASH_SetErrorCode+0x9c>)
 800129c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <FLASH_SetErrorCode+0x98>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <FLASH_SetErrorCode+0x9c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	4a17      	ldr	r2, [pc, #92]	; (8001318 <FLASH_SetErrorCode+0x9c>)
 80012bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <FLASH_SetErrorCode+0x98>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <FLASH_SetErrorCode+0x9c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <FLASH_SetErrorCode+0x9c>)
 80012dc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <FLASH_SetErrorCode+0x98>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <FLASH_SetErrorCode+0x98>)
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f240 1201 	movw	r2, #257	; 0x101
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d106      	bne.n	8001302 <FLASH_SetErrorCode+0x86>
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <FLASH_SetErrorCode+0x98>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <FLASH_SetErrorCode+0x98>)
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	61d3      	str	r3, [r2, #28]
}  
 8001300:	e002      	b.n	8001308 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <FLASH_SetErrorCode+0x98>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	60d3      	str	r3, [r2, #12]
}  
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40022000 	.word	0x40022000
 8001318:	200000e0 	.word	0x200000e0

0800131c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <HAL_FLASHEx_Erase+0xd0>)
 8001330:	7e1b      	ldrb	r3, [r3, #24]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_FLASHEx_Erase+0x1e>
 8001336:	2302      	movs	r3, #2
 8001338:	e053      	b.n	80013e2 <HAL_FLASHEx_Erase+0xc6>
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <HAL_FLASHEx_Erase+0xd0>)
 800133c:	2201      	movs	r2, #1
 800133e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d116      	bne.n	8001376 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001348:	f24c 3050 	movw	r0, #50000	; 0xc350
 800134c:	f7ff ff50 	bl	80011f0 <FLASH_WaitForLastOperation>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d141      	bne.n	80013da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001356:	2001      	movs	r0, #1
 8001358:	f000 f84c 	bl	80013f4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800135c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001360:	f7ff ff46 	bl	80011f0 <FLASH_WaitForLastOperation>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_FLASHEx_Erase+0xd4>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <HAL_FLASHEx_Erase+0xd4>)
 800136e:	f023 0304 	bic.w	r3, r3, #4
 8001372:	6113      	str	r3, [r2, #16]
 8001374:	e031      	b.n	80013da <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001376:	f24c 3050 	movw	r0, #50000	; 0xc350
 800137a:	f7ff ff39 	bl	80011f0 <FLASH_WaitForLastOperation>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d12a      	bne.n	80013da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f04f 32ff 	mov.w	r2, #4294967295
 800138a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	e019      	b.n	80013c8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f000 f849 	bl	800142c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800139a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800139e:	f7ff ff27 	bl	80011f0 <FLASH_WaitForLastOperation>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_FLASHEx_Erase+0xd4>)
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <HAL_FLASHEx_Erase+0xd4>)
 80013ac:	f023 0302 	bic.w	r3, r3, #2
 80013b0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	601a      	str	r2, [r3, #0]
            break;
 80013be:	e00c      	b.n	80013da <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013c6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	029a      	lsls	r2, r3, #10
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3dc      	bcc.n	8001394 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_FLASHEx_Erase+0xd0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	761a      	strb	r2, [r3, #24]

  return status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000e0 	.word	0x200000e0
 80013f0:	40022000 	.word	0x40022000

080013f4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <FLASH_MassErase+0x30>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <FLASH_MassErase+0x34>)
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <FLASH_MassErase+0x34>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <FLASH_MassErase+0x34>)
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <FLASH_MassErase+0x34>)
 8001414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001418:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	200000e0 	.word	0x200000e0
 8001428:	40022000 	.word	0x40022000

0800142c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <FLASH_PageErase+0x38>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <FLASH_PageErase+0x3c>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <FLASH_PageErase+0x3c>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <FLASH_PageErase+0x3c>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <FLASH_PageErase+0x3c>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <FLASH_PageErase+0x3c>)
 8001452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001456:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200000e0 	.word	0x200000e0
 8001468:	40022000 	.word	0x40022000

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b08b      	sub	sp, #44	; 0x2c
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e121      	b.n	80016c4 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001480:	2201      	movs	r2, #1
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	429a      	cmp	r2, r3
 800149a:	f040 8110 	bne.w	80016be <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d034      	beq.n	8001510 <HAL_GPIO_Init+0xa4>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d80d      	bhi.n	80014c6 <HAL_GPIO_Init+0x5a>
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d02b      	beq.n	8001506 <HAL_GPIO_Init+0x9a>
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d804      	bhi.n	80014bc <HAL_GPIO_Init+0x50>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d031      	beq.n	800151a <HAL_GPIO_Init+0xae>
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d01c      	beq.n	80014f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ba:	e048      	b.n	800154e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d043      	beq.n	8001548 <HAL_GPIO_Init+0xdc>
 80014c0:	2b11      	cmp	r3, #17
 80014c2:	d01b      	beq.n	80014fc <HAL_GPIO_Init+0x90>
          break;
 80014c4:	e043      	b.n	800154e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014c6:	4a86      	ldr	r2, [pc, #536]	; (80016e0 <HAL_GPIO_Init+0x274>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d026      	beq.n	800151a <HAL_GPIO_Init+0xae>
 80014cc:	4a84      	ldr	r2, [pc, #528]	; (80016e0 <HAL_GPIO_Init+0x274>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d806      	bhi.n	80014e0 <HAL_GPIO_Init+0x74>
 80014d2:	4a84      	ldr	r2, [pc, #528]	; (80016e4 <HAL_GPIO_Init+0x278>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d020      	beq.n	800151a <HAL_GPIO_Init+0xae>
 80014d8:	4a83      	ldr	r2, [pc, #524]	; (80016e8 <HAL_GPIO_Init+0x27c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01d      	beq.n	800151a <HAL_GPIO_Init+0xae>
          break;
 80014de:	e036      	b.n	800154e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014e0:	4a82      	ldr	r2, [pc, #520]	; (80016ec <HAL_GPIO_Init+0x280>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0xae>
 80014e6:	4a82      	ldr	r2, [pc, #520]	; (80016f0 <HAL_GPIO_Init+0x284>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d016      	beq.n	800151a <HAL_GPIO_Init+0xae>
 80014ec:	4a81      	ldr	r2, [pc, #516]	; (80016f4 <HAL_GPIO_Init+0x288>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_Init+0xae>
          break;
 80014f2:	e02c      	b.n	800154e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e028      	b.n	800154e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	3304      	adds	r3, #4
 8001502:	623b      	str	r3, [r7, #32]
          break;
 8001504:	e023      	b.n	800154e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	3308      	adds	r3, #8
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e01e      	b.n	800154e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	330c      	adds	r3, #12
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e019      	b.n	800154e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001522:	2304      	movs	r3, #4
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e012      	b.n	800154e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d105      	bne.n	800153c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001530:	2308      	movs	r3, #8
 8001532:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	611a      	str	r2, [r3, #16]
          break;
 800153a:	e008      	b.n	800154e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800153c:	2308      	movs	r3, #8
 800153e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	615a      	str	r2, [r3, #20]
          break;
 8001546:	e002      	b.n	800154e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2bff      	cmp	r3, #255	; 0xff
 8001552:	d801      	bhi.n	8001558 <HAL_GPIO_Init+0xec>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	e001      	b.n	800155c <HAL_GPIO_Init+0xf0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3304      	adds	r3, #4
 800155c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2bff      	cmp	r3, #255	; 0xff
 8001562:	d802      	bhi.n	800156a <HAL_GPIO_Init+0xfe>
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x104>
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	3b08      	subs	r3, #8
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	210f      	movs	r1, #15
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	401a      	ands	r2, r3
 8001582:	6a39      	ldr	r1, [r7, #32]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	431a      	orrs	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8090 	beq.w	80016be <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <HAL_GPIO_Init+0x28c>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <HAL_GPIO_Init+0x28c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6193      	str	r3, [r2, #24]
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_GPIO_Init+0x28c>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b6:	4a51      	ldr	r2, [pc, #324]	; (80016fc <HAL_GPIO_Init+0x290>)
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a48      	ldr	r2, [pc, #288]	; (8001700 <HAL_GPIO_Init+0x294>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d00d      	beq.n	80015fe <HAL_GPIO_Init+0x192>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a47      	ldr	r2, [pc, #284]	; (8001704 <HAL_GPIO_Init+0x298>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d007      	beq.n	80015fa <HAL_GPIO_Init+0x18e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a46      	ldr	r2, [pc, #280]	; (8001708 <HAL_GPIO_Init+0x29c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_GPIO_Init+0x18a>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x194>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x194>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x194>
 80015fe:	2300      	movs	r3, #0
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001610:	493a      	ldr	r1, [pc, #232]	; (80016fc <HAL_GPIO_Init+0x290>)
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <HAL_GPIO_Init+0x2a0>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4937      	ldr	r1, [pc, #220]	; (800170c <HAL_GPIO_Init+0x2a0>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001638:	4b34      	ldr	r3, [pc, #208]	; (800170c <HAL_GPIO_Init+0x2a0>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	4932      	ldr	r1, [pc, #200]	; (800170c <HAL_GPIO_Init+0x2a0>)
 8001642:	4013      	ands	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_GPIO_Init+0x2a0>)
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	492d      	ldr	r1, [pc, #180]	; (800170c <HAL_GPIO_Init+0x2a0>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_GPIO_Init+0x2a0>)
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	4928      	ldr	r1, [pc, #160]	; (800170c <HAL_GPIO_Init+0x2a0>)
 800166a:	4013      	ands	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_GPIO_Init+0x2a0>)
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	4923      	ldr	r1, [pc, #140]	; (800170c <HAL_GPIO_Init+0x2a0>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
 8001686:	e006      	b.n	8001696 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_GPIO_Init+0x2a0>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	491e      	ldr	r1, [pc, #120]	; (800170c <HAL_GPIO_Init+0x2a0>)
 8001692:	4013      	ands	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_GPIO_Init+0x2a0>)
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	4919      	ldr	r1, [pc, #100]	; (800170c <HAL_GPIO_Init+0x2a0>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60cb      	str	r3, [r1, #12]
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_GPIO_Init+0x2a0>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4914      	ldr	r1, [pc, #80]	; (800170c <HAL_GPIO_Init+0x2a0>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f47f aed6 	bne.w	8001480 <HAL_GPIO_Init+0x14>
  }
}
 80016d4:	bf00      	nop
 80016d6:	372c      	adds	r7, #44	; 0x2c
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10110000 	.word	0x10110000
 80016e8:	10120000 	.word	0x10120000
 80016ec:	10310000 	.word	0x10310000
 80016f0:	10320000 	.word	0x10320000
 80016f4:	10220000 	.word	0x10220000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40011000 	.word	0x40011000
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e26c      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8087 	beq.w	800183e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001730:	4b92      	ldr	r3, [pc, #584]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b04      	cmp	r3, #4
 800173a:	d00c      	beq.n	8001756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800173c:	4b8f      	ldr	r3, [pc, #572]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d112      	bne.n	800176e <HAL_RCC_OscConfig+0x5e>
 8001748:	4b8c      	ldr	r3, [pc, #560]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d10b      	bne.n	800176e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001756:	4b89      	ldr	r3, [pc, #548]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d06c      	beq.n	800183c <HAL_RCC_OscConfig+0x12c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d168      	bne.n	800183c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e246      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x76>
 8001778:	4b80      	ldr	r3, [pc, #512]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a7f      	ldr	r2, [pc, #508]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800177e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e02e      	b.n	80017e4 <HAL_RCC_OscConfig+0xd4>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x98>
 800178e:	4b7b      	ldr	r3, [pc, #492]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a7a      	ldr	r2, [pc, #488]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b78      	ldr	r3, [pc, #480]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a77      	ldr	r2, [pc, #476]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e01d      	b.n	80017e4 <HAL_RCC_OscConfig+0xd4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0xbc>
 80017b2:	4b72      	ldr	r3, [pc, #456]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a71      	ldr	r2, [pc, #452]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b6f      	ldr	r3, [pc, #444]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6e      	ldr	r2, [pc, #440]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0xd4>
 80017cc:	4b6b      	ldr	r3, [pc, #428]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a6a      	ldr	r2, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a67      	ldr	r2, [pc, #412]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fa6c 	bl	8000cc8 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa68 	bl	8000cc8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1fa      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0xe4>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fa58 	bl	8000cc8 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fa54 	bl	8000cc8 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e1e6      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x10c>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d063      	beq.n	8001912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800184a:	4b4c      	ldr	r3, [pc, #304]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001856:	4b49      	ldr	r3, [pc, #292]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	d11c      	bne.n	800189c <HAL_RCC_OscConfig+0x18c>
 8001862:	4b46      	ldr	r3, [pc, #280]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	4b43      	ldr	r3, [pc, #268]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x176>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e1ba      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4939      	ldr	r1, [pc, #228]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	e03a      	b.n	8001912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fa0d 	bl	8000cc8 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fa09 	bl	8000cc8 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e19b      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4927      	ldr	r1, [pc, #156]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f9ec 	bl	8000cc8 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff f9e8 	bl	8000cc8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e17a      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d03a      	beq.n	8001994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d019      	beq.n	800195a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff f9cc 	bl	8000cc8 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff f9c8 	bl	8000cc8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e15a      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f000 fada 	bl	8001f0c <RCC_Delay>
 8001958:	e01c      	b.n	8001994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff f9b2 	bl	8000cc8 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001966:	e00f      	b.n	8001988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff f9ae 	bl	8000cc8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d908      	bls.n	8001988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e140      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	42420000 	.word	0x42420000
 8001984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001988:	4b9e      	ldr	r3, [pc, #632]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e9      	bne.n	8001968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80a6 	beq.w	8001aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a6:	4b97      	ldr	r3, [pc, #604]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10d      	bne.n	80019ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b94      	ldr	r3, [pc, #592]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a93      	ldr	r2, [pc, #588]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	61d3      	str	r3, [r2, #28]
 80019be:	4b91      	ldr	r3, [pc, #580]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019da:	4b8b      	ldr	r3, [pc, #556]	; (8001c08 <HAL_RCC_OscConfig+0x4f8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a8a      	ldr	r2, [pc, #552]	; (8001c08 <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e6:	f7ff f96f 	bl	8000cc8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ee:	f7ff f96b 	bl	8000cc8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0fd      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b81      	ldr	r3, [pc, #516]	; (8001c08 <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x312>
 8001a14:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a7a      	ldr	r2, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	e02d      	b.n	8001a7e <HAL_RCC_OscConfig+0x36e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x334>
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	4b73      	ldr	r3, [pc, #460]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a72      	ldr	r2, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	e01c      	b.n	8001a7e <HAL_RCC_OscConfig+0x36e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d10c      	bne.n	8001a66 <HAL_RCC_OscConfig+0x356>
 8001a4c:	4b6d      	ldr	r3, [pc, #436]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4a6c      	ldr	r2, [pc, #432]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6213      	str	r3, [r2, #32]
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a69      	ldr	r2, [pc, #420]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	e00b      	b.n	8001a7e <HAL_RCC_OscConfig+0x36e>
 8001a66:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a66      	ldr	r2, [pc, #408]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6213      	str	r3, [r2, #32]
 8001a72:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a63      	ldr	r2, [pc, #396]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d015      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff f91f 	bl	8000cc8 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff f91b 	bl	8000cc8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0ab      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa4:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ee      	beq.n	8001a8e <HAL_RCC_OscConfig+0x37e>
 8001ab0:	e014      	b.n	8001adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f909 	bl	8000cc8 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff f905 	bl	8000cc8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e095      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ee      	bne.n	8001aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d105      	bne.n	8001aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae2:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8081 	beq.w	8001bfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af8:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d061      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d146      	bne.n	8001b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <HAL_RCC_OscConfig+0x4fc>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff f8d9 	bl	8000cc8 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff f8d5 	bl	8000cc8 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e067      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2c:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b40:	d108      	bne.n	8001b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	492d      	ldr	r1, [pc, #180]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a19      	ldr	r1, [r3, #32]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	430b      	orrs	r3, r1
 8001b66:	4927      	ldr	r1, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x4fc>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff f8a9 	bl	8000cc8 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff f8a5 	bl	8000cc8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e037      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x46a>
 8001b98:	e02f      	b.n	8001bfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <HAL_RCC_OscConfig+0x4fc>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f892 	bl	8000cc8 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f88e 	bl	8000cc8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e020      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x498>
 8001bc6:	e018      	b.n	8001bfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e013      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	42420060 	.word	0x42420060

08001c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0d0      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d910      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 0207 	bic.w	r2, r3, #7
 8001c3a:	4965      	ldr	r1, [pc, #404]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b8      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	494d      	ldr	r1, [pc, #308]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d040      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e07f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e073      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e06b      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d00:	f7fe ffe2 	bl	8000cc8 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7fe ffde 	bl	8000cc8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e053      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d210      	bcs.n	8001d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 0207 	bic.w	r2, r3, #7
 8001d46:	4922      	ldr	r1, [pc, #136]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e032      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4916      	ldr	r1, [pc, #88]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9e:	f000 f821 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001da2:	4601      	mov	r1, r0
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	5cd3      	ldrb	r3, [r2, r3]
 8001db2:	fa21 f303 	lsr.w	r3, r1, r3
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1cc>)
 8001db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe ff40 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08003464 	.word	0x08003464
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b490      	push	{r4, r7}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dec:	1d3c      	adds	r4, r7, #4
 8001dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d002      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x40>
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x46>
 8001e22:	e02d      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e26:	623b      	str	r3, [r7, #32]
      break;
 8001e28:	e02d      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	0c9b      	lsrs	r3, r3, #18
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e36:	4413      	add	r3, r2
 8001e38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	0c5b      	lsrs	r3, r3, #17
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e56:	4413      	add	r3, r2
 8001e58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e62:	fb02 f203 	mul.w	r2, r2, r3
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6e:	e004      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	623b      	str	r3, [r7, #32]
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e82:	623b      	str	r3, [r7, #32]
      break;
 8001e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e86:	6a3b      	ldr	r3, [r7, #32]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3728      	adds	r7, #40	; 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc90      	pop	{r4, r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	08003450 	.word	0x08003450
 8001e98:	08003460 	.word	0x08003460
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	007a1200 	.word	0x007a1200
 8001ea4:	003d0900 	.word	0x003d0900

08001ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eac:	4b02      	ldr	r3, [pc, #8]	; (8001eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec0:	f7ff fff2 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4601      	mov	r1, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4a03      	ldr	r2, [pc, #12]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08003474 	.word	0x08003474

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee8:	f7ff ffde 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001eec:	4601      	mov	r1, r0
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	0adb      	lsrs	r3, r3, #11
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08003474 	.word	0x08003474

08001f0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <RCC_Delay+0x34>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <RCC_Delay+0x38>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0a5b      	lsrs	r3, r3, #9
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f28:	bf00      	nop
  }
  while (Delay --);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1e5a      	subs	r2, r3, #1
 8001f2e:	60fa      	str	r2, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f9      	bne.n	8001f28 <RCC_Delay+0x1c>
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000
 8001f44:	10624dd3 	.word	0x10624dd3

08001f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e03f      	b.n	8001fda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fd6a 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fc27 	bl	80027e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b08a      	sub	sp, #40	; 0x28
 8001fe6:	af02      	add	r7, sp, #8
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	d17c      	bne.n	80020fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_UART_Transmit+0x2c>
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e075      	b.n	80020fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_UART_Transmit+0x3e>
 800201c:	2302      	movs	r3, #2
 800201e:	e06e      	b.n	80020fe <HAL_UART_Transmit+0x11c>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2221      	movs	r2, #33	; 0x21
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002036:	f7fe fe47 	bl	8000cc8 <HAL_GetTick>
 800203a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	88fa      	ldrh	r2, [r7, #6]
 8002040:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	88fa      	ldrh	r2, [r7, #6]
 8002046:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002050:	d108      	bne.n	8002064 <HAL_UART_Transmit+0x82>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d104      	bne.n	8002064 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	e003      	b.n	800206c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002074:	e02a      	b.n	80020cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2200      	movs	r2, #0
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fa13 	bl	80024ac <UART_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e036      	b.n	80020fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10b      	bne.n	80020ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	3302      	adds	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	e007      	b.n	80020be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1cf      	bne.n	8002076 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f9e3 	bl	80024ac <UART_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e006      	b.n	80020fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_UART_IRQHandler+0x52>
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fa9b 	bl	800268e <UART_Receive_IT>
      return;
 8002158:	e17c      	b.n	8002454 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80b1 	beq.w	80022c4 <HAL_UART_IRQHandler+0x1bc>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_UART_IRQHandler+0x70>
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80a6 	beq.w	80022c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_UART_IRQHandler+0x90>
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_UART_IRQHandler+0xb0>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f043 0202 	orr.w	r2, r3, #2
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_UART_IRQHandler+0xd0>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0204 	orr.w	r2, r3, #4
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00f      	beq.n	8002202 <HAL_UART_IRQHandler+0xfa>
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d104      	bne.n	80021f6 <HAL_UART_IRQHandler+0xee>
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f043 0208 	orr.w	r2, r3, #8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 811f 	beq.w	800244a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_UART_IRQHandler+0x11e>
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fa34 	bl	800268e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf14      	ite	ne
 8002234:	2301      	movne	r3, #1
 8002236:	2300      	moveq	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <HAL_UART_IRQHandler+0x146>
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d031      	beq.n	80022b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f976 	bl	8002540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d023      	beq.n	80022aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002270:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	2b00      	cmp	r3, #0
 8002278:	d013      	beq.n	80022a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	4a77      	ldr	r2, [pc, #476]	; (800245c <HAL_UART_IRQHandler+0x354>)
 8002280:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fe70 	bl	8000f6c <HAL_DMA_Abort_IT>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d016      	beq.n	80022c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800229c:	4610      	mov	r0, r2
 800229e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a0:	e00e      	b.n	80022c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f8ee 	bl	8002484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a8:	e00a      	b.n	80022c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8ea 	bl	8002484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b0:	e006      	b.n	80022c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8e6 	bl	8002484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80022be:	e0c4      	b.n	800244a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c0:	bf00      	nop
    return;
 80022c2:	e0c2      	b.n	800244a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	f040 80a1 	bne.w	8002410 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 809b 	beq.w	8002410 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8095 	beq.w	8002410 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d04e      	beq.n	80023a8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002314:	8a3b      	ldrh	r3, [r7, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8099 	beq.w	800244e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002320:	8a3a      	ldrh	r2, [r7, #16]
 8002322:	429a      	cmp	r2, r3
 8002324:	f080 8093 	bcs.w	800244e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	8a3a      	ldrh	r2, [r7, #16]
 800232c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b20      	cmp	r3, #32
 8002336:	d02b      	beq.n	8002390 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002346:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002366:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0210 	bic.w	r2, r2, #16
 8002384:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fdb3 	bl	8000ef6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002398:	b29b      	uxth	r3, r3
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	b29b      	uxth	r3, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f878 	bl	8002496 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80023a6:	e052      	b.n	800244e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d048      	beq.n	8002452 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80023c0:	8a7b      	ldrh	r3, [r7, #18]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d045      	beq.n	8002452 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023d4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0210 	bic.w	r2, r2, #16
 8002402:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002404:	8a7b      	ldrh	r3, [r7, #18]
 8002406:	4619      	mov	r1, r3
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f844 	bl	8002496 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800240e:	e020      	b.n	8002452 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_UART_IRQHandler+0x324>
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f8cb 	bl	80025c0 <UART_Transmit_IT>
    return;
 800242a:	e013      	b.n	8002454 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00e      	beq.n	8002454 <HAL_UART_IRQHandler+0x34c>
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f90c 	bl	800265e <UART_EndTransmit_IT>
    return;
 8002446:	bf00      	nop
 8002448:	e004      	b.n	8002454 <HAL_UART_IRQHandler+0x34c>
    return;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <HAL_UART_IRQHandler+0x34c>
      return;
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <HAL_UART_IRQHandler+0x34c>
      return;
 8002452:	bf00      	nop
  }
}
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	08002599 	.word	0x08002599

08002460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024bc:	e02c      	b.n	8002518 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d028      	beq.n	8002518 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x30>
 80024cc:	f7fe fbfc 	bl	8000cc8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d21d      	bcs.n	8002518 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e00f      	b.n	8002538 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4013      	ands	r3, r2
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	429a      	cmp	r2, r3
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	429a      	cmp	r2, r3
 8002534:	d0c3      	beq.n	80024be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002556:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0210 	bic.w	r2, r2, #16
 800257e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f7ff ff66 	bl	8002484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b21      	cmp	r3, #33	; 0x21
 80025d2:	d13e      	bne.n	8002652 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025dc:	d114      	bne.n	8002608 <UART_Transmit_IT+0x48>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d110      	bne.n	8002608 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	621a      	str	r2, [r3, #32]
 8002606:	e008      	b.n	800261a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	1c59      	adds	r1, r3, #1
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6211      	str	r1, [r2, #32]
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29b      	uxth	r3, r3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4619      	mov	r1, r3
 8002628:	84d1      	strh	r1, [r2, #38]	; 0x26
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002652:	2302      	movs	r3, #2
  }
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002674:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff feee 	bl	8002460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b22      	cmp	r3, #34	; 0x22
 80026a0:	f040 8099 	bne.w	80027d6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ac:	d117      	bne.n	80026de <UART_Receive_IT+0x50>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d113      	bne.n	80026de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	1c9a      	adds	r2, r3, #2
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
 80026dc:	e026      	b.n	800272c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f0:	d007      	beq.n	8002702 <UART_Receive_IT+0x74>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <UART_Receive_IT+0x82>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e008      	b.n	8002722 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800271c:	b2da      	uxtb	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29b      	uxth	r3, r3
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4619      	mov	r1, r3
 800273a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800273c:	2b00      	cmp	r3, #0
 800273e:	d148      	bne.n	80027d2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0220 	bic.w	r2, r2, #32
 800274e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800275e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	2b01      	cmp	r3, #1
 800277e:	d123      	bne.n	80027c8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0210 	bic.w	r2, r2, #16
 8002794:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d10a      	bne.n	80027ba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff fe68 	bl	8002496 <HAL_UARTEx_RxEventCallback>
 80027c6:	e002      	b.n	80027ce <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fe52 	bl	8002472 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e002      	b.n	80027d8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800281a:	f023 030c 	bic.w	r3, r3, #12
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	430b      	orrs	r3, r1
 8002826:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <UART_SetConfig+0x114>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d103      	bne.n	8002850 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002848:	f7ff fb4c 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	e002      	b.n	8002856 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002850:	f7ff fb34 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8002854:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009a      	lsls	r2, r3, #2
 8002860:	441a      	add	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <UART_SetConfig+0x118>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	0119      	lsls	r1, r3, #4
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009a      	lsls	r2, r3, #2
 8002880:	441a      	add	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	fbb2 f2f3 	udiv	r2, r2, r3
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <UART_SetConfig+0x118>)
 800288e:	fba3 0302 	umull	r0, r3, r3, r2
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2064      	movs	r0, #100	; 0x64
 8002896:	fb00 f303 	mul.w	r3, r0, r3
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	3332      	adds	r3, #50	; 0x32
 80028a0:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <UART_SetConfig+0x118>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ac:	4419      	add	r1, r3
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009a      	lsls	r2, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <UART_SetConfig+0x118>)
 80028c6:	fba3 0302 	umull	r0, r3, r3, r2
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2064      	movs	r0, #100	; 0x64
 80028ce:	fb00 f303 	mul.w	r3, r0, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	3332      	adds	r3, #50	; 0x32
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <UART_SetConfig+0x118>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	f003 020f 	and.w	r2, r3, #15
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	440a      	add	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40013800 	.word	0x40013800
 80028f8:	51eb851f 	.word	0x51eb851f

080028fc <__errno>:
 80028fc:	4b01      	ldr	r3, [pc, #4]	; (8002904 <__errno+0x8>)
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	2000000c 	.word	0x2000000c

08002908 <__libc_init_array>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	2500      	movs	r5, #0
 800290c:	4e0c      	ldr	r6, [pc, #48]	; (8002940 <__libc_init_array+0x38>)
 800290e:	4c0d      	ldr	r4, [pc, #52]	; (8002944 <__libc_init_array+0x3c>)
 8002910:	1ba4      	subs	r4, r4, r6
 8002912:	10a4      	asrs	r4, r4, #2
 8002914:	42a5      	cmp	r5, r4
 8002916:	d109      	bne.n	800292c <__libc_init_array+0x24>
 8002918:	f000 fc68 	bl	80031ec <_init>
 800291c:	2500      	movs	r5, #0
 800291e:	4e0a      	ldr	r6, [pc, #40]	; (8002948 <__libc_init_array+0x40>)
 8002920:	4c0a      	ldr	r4, [pc, #40]	; (800294c <__libc_init_array+0x44>)
 8002922:	1ba4      	subs	r4, r4, r6
 8002924:	10a4      	asrs	r4, r4, #2
 8002926:	42a5      	cmp	r5, r4
 8002928:	d105      	bne.n	8002936 <__libc_init_array+0x2e>
 800292a:	bd70      	pop	{r4, r5, r6, pc}
 800292c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002930:	4798      	blx	r3
 8002932:	3501      	adds	r5, #1
 8002934:	e7ee      	b.n	8002914 <__libc_init_array+0xc>
 8002936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800293a:	4798      	blx	r3
 800293c:	3501      	adds	r5, #1
 800293e:	e7f2      	b.n	8002926 <__libc_init_array+0x1e>
 8002940:	080034b0 	.word	0x080034b0
 8002944:	080034b0 	.word	0x080034b0
 8002948:	080034b0 	.word	0x080034b0
 800294c:	080034b4 	.word	0x080034b4

08002950 <memset>:
 8002950:	4603      	mov	r3, r0
 8002952:	4402      	add	r2, r0
 8002954:	4293      	cmp	r3, r2
 8002956:	d100      	bne.n	800295a <memset+0xa>
 8002958:	4770      	bx	lr
 800295a:	f803 1b01 	strb.w	r1, [r3], #1
 800295e:	e7f9      	b.n	8002954 <memset+0x4>

08002960 <sniprintf>:
 8002960:	b40c      	push	{r2, r3}
 8002962:	b530      	push	{r4, r5, lr}
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <sniprintf+0x64>)
 8002966:	1e0c      	subs	r4, r1, #0
 8002968:	b09d      	sub	sp, #116	; 0x74
 800296a:	681d      	ldr	r5, [r3, #0]
 800296c:	da08      	bge.n	8002980 <sniprintf+0x20>
 800296e:	238b      	movs	r3, #139	; 0x8b
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	602b      	str	r3, [r5, #0]
 8002976:	b01d      	add	sp, #116	; 0x74
 8002978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800297c:	b002      	add	sp, #8
 800297e:	4770      	bx	lr
 8002980:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002984:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002988:	bf0c      	ite	eq
 800298a:	4623      	moveq	r3, r4
 800298c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002990:	9304      	str	r3, [sp, #16]
 8002992:	9307      	str	r3, [sp, #28]
 8002994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002998:	9002      	str	r0, [sp, #8]
 800299a:	9006      	str	r0, [sp, #24]
 800299c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80029a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80029a2:	ab21      	add	r3, sp, #132	; 0x84
 80029a4:	a902      	add	r1, sp, #8
 80029a6:	4628      	mov	r0, r5
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	f000 f887 	bl	8002abc <_svfiprintf_r>
 80029ae:	1c43      	adds	r3, r0, #1
 80029b0:	bfbc      	itt	lt
 80029b2:	238b      	movlt	r3, #139	; 0x8b
 80029b4:	602b      	strlt	r3, [r5, #0]
 80029b6:	2c00      	cmp	r4, #0
 80029b8:	d0dd      	beq.n	8002976 <sniprintf+0x16>
 80029ba:	2200      	movs	r2, #0
 80029bc:	9b02      	ldr	r3, [sp, #8]
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e7d9      	b.n	8002976 <sniprintf+0x16>
 80029c2:	bf00      	nop
 80029c4:	2000000c 	.word	0x2000000c

080029c8 <siprintf>:
 80029c8:	b40e      	push	{r1, r2, r3}
 80029ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029ce:	b500      	push	{lr}
 80029d0:	b09c      	sub	sp, #112	; 0x70
 80029d2:	ab1d      	add	r3, sp, #116	; 0x74
 80029d4:	9002      	str	r0, [sp, #8]
 80029d6:	9006      	str	r0, [sp, #24]
 80029d8:	9107      	str	r1, [sp, #28]
 80029da:	9104      	str	r1, [sp, #16]
 80029dc:	4808      	ldr	r0, [pc, #32]	; (8002a00 <siprintf+0x38>)
 80029de:	4909      	ldr	r1, [pc, #36]	; (8002a04 <siprintf+0x3c>)
 80029e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80029e4:	9105      	str	r1, [sp, #20]
 80029e6:	6800      	ldr	r0, [r0, #0]
 80029e8:	a902      	add	r1, sp, #8
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	f000 f866 	bl	8002abc <_svfiprintf_r>
 80029f0:	2200      	movs	r2, #0
 80029f2:	9b02      	ldr	r3, [sp, #8]
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	b01c      	add	sp, #112	; 0x70
 80029f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80029fc:	b003      	add	sp, #12
 80029fe:	4770      	bx	lr
 8002a00:	2000000c 	.word	0x2000000c
 8002a04:	ffff0208 	.word	0xffff0208

08002a08 <__ssputs_r>:
 8002a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a0c:	688e      	ldr	r6, [r1, #8]
 8002a0e:	4682      	mov	sl, r0
 8002a10:	429e      	cmp	r6, r3
 8002a12:	460c      	mov	r4, r1
 8002a14:	4690      	mov	r8, r2
 8002a16:	4699      	mov	r9, r3
 8002a18:	d837      	bhi.n	8002a8a <__ssputs_r+0x82>
 8002a1a:	898a      	ldrh	r2, [r1, #12]
 8002a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a20:	d031      	beq.n	8002a86 <__ssputs_r+0x7e>
 8002a22:	2302      	movs	r3, #2
 8002a24:	6825      	ldr	r5, [r4, #0]
 8002a26:	6909      	ldr	r1, [r1, #16]
 8002a28:	1a6f      	subs	r7, r5, r1
 8002a2a:	6965      	ldr	r5, [r4, #20]
 8002a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a30:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a34:	f109 0301 	add.w	r3, r9, #1
 8002a38:	443b      	add	r3, r7
 8002a3a:	429d      	cmp	r5, r3
 8002a3c:	bf38      	it	cc
 8002a3e:	461d      	movcc	r5, r3
 8002a40:	0553      	lsls	r3, r2, #21
 8002a42:	d530      	bpl.n	8002aa6 <__ssputs_r+0x9e>
 8002a44:	4629      	mov	r1, r5
 8002a46:	f000 fb37 	bl	80030b8 <_malloc_r>
 8002a4a:	4606      	mov	r6, r0
 8002a4c:	b950      	cbnz	r0, 8002a64 <__ssputs_r+0x5c>
 8002a4e:	230c      	movs	r3, #12
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f8ca 3000 	str.w	r3, [sl]
 8002a58:	89a3      	ldrh	r3, [r4, #12]
 8002a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5e:	81a3      	strh	r3, [r4, #12]
 8002a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a64:	463a      	mov	r2, r7
 8002a66:	6921      	ldr	r1, [r4, #16]
 8002a68:	f000 fab6 	bl	8002fd8 <memcpy>
 8002a6c:	89a3      	ldrh	r3, [r4, #12]
 8002a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a76:	81a3      	strh	r3, [r4, #12]
 8002a78:	6126      	str	r6, [r4, #16]
 8002a7a:	443e      	add	r6, r7
 8002a7c:	6026      	str	r6, [r4, #0]
 8002a7e:	464e      	mov	r6, r9
 8002a80:	6165      	str	r5, [r4, #20]
 8002a82:	1bed      	subs	r5, r5, r7
 8002a84:	60a5      	str	r5, [r4, #8]
 8002a86:	454e      	cmp	r6, r9
 8002a88:	d900      	bls.n	8002a8c <__ssputs_r+0x84>
 8002a8a:	464e      	mov	r6, r9
 8002a8c:	4632      	mov	r2, r6
 8002a8e:	4641      	mov	r1, r8
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	f000 faac 	bl	8002fee <memmove>
 8002a96:	68a3      	ldr	r3, [r4, #8]
 8002a98:	2000      	movs	r0, #0
 8002a9a:	1b9b      	subs	r3, r3, r6
 8002a9c:	60a3      	str	r3, [r4, #8]
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	441e      	add	r6, r3
 8002aa2:	6026      	str	r6, [r4, #0]
 8002aa4:	e7dc      	b.n	8002a60 <__ssputs_r+0x58>
 8002aa6:	462a      	mov	r2, r5
 8002aa8:	f000 fb60 	bl	800316c <_realloc_r>
 8002aac:	4606      	mov	r6, r0
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d1e2      	bne.n	8002a78 <__ssputs_r+0x70>
 8002ab2:	6921      	ldr	r1, [r4, #16]
 8002ab4:	4650      	mov	r0, sl
 8002ab6:	f000 fab3 	bl	8003020 <_free_r>
 8002aba:	e7c8      	b.n	8002a4e <__ssputs_r+0x46>

08002abc <_svfiprintf_r>:
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	898b      	ldrh	r3, [r1, #12]
 8002ac4:	b09d      	sub	sp, #116	; 0x74
 8002ac6:	061f      	lsls	r7, r3, #24
 8002ac8:	4680      	mov	r8, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	4616      	mov	r6, r2
 8002ace:	d50f      	bpl.n	8002af0 <_svfiprintf_r+0x34>
 8002ad0:	690b      	ldr	r3, [r1, #16]
 8002ad2:	b96b      	cbnz	r3, 8002af0 <_svfiprintf_r+0x34>
 8002ad4:	2140      	movs	r1, #64	; 0x40
 8002ad6:	f000 faef 	bl	80030b8 <_malloc_r>
 8002ada:	6020      	str	r0, [r4, #0]
 8002adc:	6120      	str	r0, [r4, #16]
 8002ade:	b928      	cbnz	r0, 8002aec <_svfiprintf_r+0x30>
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	f8c8 3000 	str.w	r3, [r8]
 8002ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aea:	e0c8      	b.n	8002c7e <_svfiprintf_r+0x1c2>
 8002aec:	2340      	movs	r3, #64	; 0x40
 8002aee:	6163      	str	r3, [r4, #20]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9309      	str	r3, [sp, #36]	; 0x24
 8002af4:	2320      	movs	r3, #32
 8002af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002afa:	2330      	movs	r3, #48	; 0x30
 8002afc:	f04f 0b01 	mov.w	fp, #1
 8002b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b04:	9503      	str	r5, [sp, #12]
 8002b06:	4637      	mov	r7, r6
 8002b08:	463d      	mov	r5, r7
 8002b0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002b0e:	b10b      	cbz	r3, 8002b14 <_svfiprintf_r+0x58>
 8002b10:	2b25      	cmp	r3, #37	; 0x25
 8002b12:	d13e      	bne.n	8002b92 <_svfiprintf_r+0xd6>
 8002b14:	ebb7 0a06 	subs.w	sl, r7, r6
 8002b18:	d00b      	beq.n	8002b32 <_svfiprintf_r+0x76>
 8002b1a:	4653      	mov	r3, sl
 8002b1c:	4632      	mov	r2, r6
 8002b1e:	4621      	mov	r1, r4
 8002b20:	4640      	mov	r0, r8
 8002b22:	f7ff ff71 	bl	8002a08 <__ssputs_r>
 8002b26:	3001      	adds	r0, #1
 8002b28:	f000 80a4 	beq.w	8002c74 <_svfiprintf_r+0x1b8>
 8002b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b2e:	4453      	add	r3, sl
 8002b30:	9309      	str	r3, [sp, #36]	; 0x24
 8002b32:	783b      	ldrb	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 809d 	beq.w	8002c74 <_svfiprintf_r+0x1b8>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b44:	9304      	str	r3, [sp, #16]
 8002b46:	9307      	str	r3, [sp, #28]
 8002b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8002b4e:	462f      	mov	r7, r5
 8002b50:	2205      	movs	r2, #5
 8002b52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002b56:	4850      	ldr	r0, [pc, #320]	; (8002c98 <_svfiprintf_r+0x1dc>)
 8002b58:	f000 fa30 	bl	8002fbc <memchr>
 8002b5c:	9b04      	ldr	r3, [sp, #16]
 8002b5e:	b9d0      	cbnz	r0, 8002b96 <_svfiprintf_r+0xda>
 8002b60:	06d9      	lsls	r1, r3, #27
 8002b62:	bf44      	itt	mi
 8002b64:	2220      	movmi	r2, #32
 8002b66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b6a:	071a      	lsls	r2, r3, #28
 8002b6c:	bf44      	itt	mi
 8002b6e:	222b      	movmi	r2, #43	; 0x2b
 8002b70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b74:	782a      	ldrb	r2, [r5, #0]
 8002b76:	2a2a      	cmp	r2, #42	; 0x2a
 8002b78:	d015      	beq.n	8002ba6 <_svfiprintf_r+0xea>
 8002b7a:	462f      	mov	r7, r5
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	250a      	movs	r5, #10
 8002b80:	9a07      	ldr	r2, [sp, #28]
 8002b82:	4639      	mov	r1, r7
 8002b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b88:	3b30      	subs	r3, #48	; 0x30
 8002b8a:	2b09      	cmp	r3, #9
 8002b8c:	d94d      	bls.n	8002c2a <_svfiprintf_r+0x16e>
 8002b8e:	b1b8      	cbz	r0, 8002bc0 <_svfiprintf_r+0x104>
 8002b90:	e00f      	b.n	8002bb2 <_svfiprintf_r+0xf6>
 8002b92:	462f      	mov	r7, r5
 8002b94:	e7b8      	b.n	8002b08 <_svfiprintf_r+0x4c>
 8002b96:	4a40      	ldr	r2, [pc, #256]	; (8002c98 <_svfiprintf_r+0x1dc>)
 8002b98:	463d      	mov	r5, r7
 8002b9a:	1a80      	subs	r0, r0, r2
 8002b9c:	fa0b f000 	lsl.w	r0, fp, r0
 8002ba0:	4318      	orrs	r0, r3
 8002ba2:	9004      	str	r0, [sp, #16]
 8002ba4:	e7d3      	b.n	8002b4e <_svfiprintf_r+0x92>
 8002ba6:	9a03      	ldr	r2, [sp, #12]
 8002ba8:	1d11      	adds	r1, r2, #4
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	9103      	str	r1, [sp, #12]
 8002bae:	2a00      	cmp	r2, #0
 8002bb0:	db01      	blt.n	8002bb6 <_svfiprintf_r+0xfa>
 8002bb2:	9207      	str	r2, [sp, #28]
 8002bb4:	e004      	b.n	8002bc0 <_svfiprintf_r+0x104>
 8002bb6:	4252      	negs	r2, r2
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	9207      	str	r2, [sp, #28]
 8002bbe:	9304      	str	r3, [sp, #16]
 8002bc0:	783b      	ldrb	r3, [r7, #0]
 8002bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc4:	d10c      	bne.n	8002be0 <_svfiprintf_r+0x124>
 8002bc6:	787b      	ldrb	r3, [r7, #1]
 8002bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bca:	d133      	bne.n	8002c34 <_svfiprintf_r+0x178>
 8002bcc:	9b03      	ldr	r3, [sp, #12]
 8002bce:	3702      	adds	r7, #2
 8002bd0:	1d1a      	adds	r2, r3, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	9203      	str	r2, [sp, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bfb8      	it	lt
 8002bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bde:	9305      	str	r3, [sp, #20]
 8002be0:	4d2e      	ldr	r5, [pc, #184]	; (8002c9c <_svfiprintf_r+0x1e0>)
 8002be2:	2203      	movs	r2, #3
 8002be4:	7839      	ldrb	r1, [r7, #0]
 8002be6:	4628      	mov	r0, r5
 8002be8:	f000 f9e8 	bl	8002fbc <memchr>
 8002bec:	b138      	cbz	r0, 8002bfe <_svfiprintf_r+0x142>
 8002bee:	2340      	movs	r3, #64	; 0x40
 8002bf0:	1b40      	subs	r0, r0, r5
 8002bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8002bf6:	9b04      	ldr	r3, [sp, #16]
 8002bf8:	3701      	adds	r7, #1
 8002bfa:	4303      	orrs	r3, r0
 8002bfc:	9304      	str	r3, [sp, #16]
 8002bfe:	7839      	ldrb	r1, [r7, #0]
 8002c00:	2206      	movs	r2, #6
 8002c02:	4827      	ldr	r0, [pc, #156]	; (8002ca0 <_svfiprintf_r+0x1e4>)
 8002c04:	1c7e      	adds	r6, r7, #1
 8002c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c0a:	f000 f9d7 	bl	8002fbc <memchr>
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d038      	beq.n	8002c84 <_svfiprintf_r+0x1c8>
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <_svfiprintf_r+0x1e8>)
 8002c14:	bb13      	cbnz	r3, 8002c5c <_svfiprintf_r+0x1a0>
 8002c16:	9b03      	ldr	r3, [sp, #12]
 8002c18:	3307      	adds	r3, #7
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	3308      	adds	r3, #8
 8002c20:	9303      	str	r3, [sp, #12]
 8002c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c24:	444b      	add	r3, r9
 8002c26:	9309      	str	r3, [sp, #36]	; 0x24
 8002c28:	e76d      	b.n	8002b06 <_svfiprintf_r+0x4a>
 8002c2a:	fb05 3202 	mla	r2, r5, r2, r3
 8002c2e:	2001      	movs	r0, #1
 8002c30:	460f      	mov	r7, r1
 8002c32:	e7a6      	b.n	8002b82 <_svfiprintf_r+0xc6>
 8002c34:	2300      	movs	r3, #0
 8002c36:	250a      	movs	r5, #10
 8002c38:	4619      	mov	r1, r3
 8002c3a:	3701      	adds	r7, #1
 8002c3c:	9305      	str	r3, [sp, #20]
 8002c3e:	4638      	mov	r0, r7
 8002c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c44:	3a30      	subs	r2, #48	; 0x30
 8002c46:	2a09      	cmp	r2, #9
 8002c48:	d903      	bls.n	8002c52 <_svfiprintf_r+0x196>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0c8      	beq.n	8002be0 <_svfiprintf_r+0x124>
 8002c4e:	9105      	str	r1, [sp, #20]
 8002c50:	e7c6      	b.n	8002be0 <_svfiprintf_r+0x124>
 8002c52:	fb05 2101 	mla	r1, r5, r1, r2
 8002c56:	2301      	movs	r3, #1
 8002c58:	4607      	mov	r7, r0
 8002c5a:	e7f0      	b.n	8002c3e <_svfiprintf_r+0x182>
 8002c5c:	ab03      	add	r3, sp, #12
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4622      	mov	r2, r4
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <_svfiprintf_r+0x1ec>)
 8002c64:	a904      	add	r1, sp, #16
 8002c66:	4640      	mov	r0, r8
 8002c68:	f3af 8000 	nop.w
 8002c6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c70:	4681      	mov	r9, r0
 8002c72:	d1d6      	bne.n	8002c22 <_svfiprintf_r+0x166>
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	065b      	lsls	r3, r3, #25
 8002c78:	f53f af35 	bmi.w	8002ae6 <_svfiprintf_r+0x2a>
 8002c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c7e:	b01d      	add	sp, #116	; 0x74
 8002c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c84:	ab03      	add	r3, sp, #12
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	4622      	mov	r2, r4
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <_svfiprintf_r+0x1ec>)
 8002c8c:	a904      	add	r1, sp, #16
 8002c8e:	4640      	mov	r0, r8
 8002c90:	f000 f882 	bl	8002d98 <_printf_i>
 8002c94:	e7ea      	b.n	8002c6c <_svfiprintf_r+0x1b0>
 8002c96:	bf00      	nop
 8002c98:	0800347c 	.word	0x0800347c
 8002c9c:	08003482 	.word	0x08003482
 8002ca0:	08003486 	.word	0x08003486
 8002ca4:	00000000 	.word	0x00000000
 8002ca8:	08002a09 	.word	0x08002a09

08002cac <_printf_common>:
 8002cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb0:	4691      	mov	r9, r2
 8002cb2:	461f      	mov	r7, r3
 8002cb4:	688a      	ldr	r2, [r1, #8]
 8002cb6:	690b      	ldr	r3, [r1, #16]
 8002cb8:	4606      	mov	r6, r0
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	bfb8      	it	lt
 8002cbe:	4613      	movlt	r3, r2
 8002cc0:	f8c9 3000 	str.w	r3, [r9]
 8002cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cc8:	460c      	mov	r4, r1
 8002cca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cce:	b112      	cbz	r2, 8002cd6 <_printf_common+0x2a>
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f8c9 3000 	str.w	r3, [r9]
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	0699      	lsls	r1, r3, #26
 8002cda:	bf42      	ittt	mi
 8002cdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ce0:	3302      	addmi	r3, #2
 8002ce2:	f8c9 3000 	strmi.w	r3, [r9]
 8002ce6:	6825      	ldr	r5, [r4, #0]
 8002ce8:	f015 0506 	ands.w	r5, r5, #6
 8002cec:	d107      	bne.n	8002cfe <_printf_common+0x52>
 8002cee:	f104 0a19 	add.w	sl, r4, #25
 8002cf2:	68e3      	ldr	r3, [r4, #12]
 8002cf4:	f8d9 2000 	ldr.w	r2, [r9]
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	42ab      	cmp	r3, r5
 8002cfc:	dc29      	bgt.n	8002d52 <_printf_common+0xa6>
 8002cfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	3300      	adds	r3, #0
 8002d06:	bf18      	it	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	0692      	lsls	r2, r2, #26
 8002d0c:	d42e      	bmi.n	8002d6c <_printf_common+0xc0>
 8002d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d12:	4639      	mov	r1, r7
 8002d14:	4630      	mov	r0, r6
 8002d16:	47c0      	blx	r8
 8002d18:	3001      	adds	r0, #1
 8002d1a:	d021      	beq.n	8002d60 <_printf_common+0xb4>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	68e5      	ldr	r5, [r4, #12]
 8002d20:	f003 0306 	and.w	r3, r3, #6
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	bf18      	it	ne
 8002d28:	2500      	movne	r5, #0
 8002d2a:	f8d9 2000 	ldr.w	r2, [r9]
 8002d2e:	f04f 0900 	mov.w	r9, #0
 8002d32:	bf08      	it	eq
 8002d34:	1aad      	subeq	r5, r5, r2
 8002d36:	68a3      	ldr	r3, [r4, #8]
 8002d38:	6922      	ldr	r2, [r4, #16]
 8002d3a:	bf08      	it	eq
 8002d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bfc4      	itt	gt
 8002d44:	1a9b      	subgt	r3, r3, r2
 8002d46:	18ed      	addgt	r5, r5, r3
 8002d48:	341a      	adds	r4, #26
 8002d4a:	454d      	cmp	r5, r9
 8002d4c:	d11a      	bne.n	8002d84 <_printf_common+0xd8>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e008      	b.n	8002d64 <_printf_common+0xb8>
 8002d52:	2301      	movs	r3, #1
 8002d54:	4652      	mov	r2, sl
 8002d56:	4639      	mov	r1, r7
 8002d58:	4630      	mov	r0, r6
 8002d5a:	47c0      	blx	r8
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	d103      	bne.n	8002d68 <_printf_common+0xbc>
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d68:	3501      	adds	r5, #1
 8002d6a:	e7c2      	b.n	8002cf2 <_printf_common+0x46>
 8002d6c:	2030      	movs	r0, #48	; 0x30
 8002d6e:	18e1      	adds	r1, r4, r3
 8002d70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d7a:	4422      	add	r2, r4
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d82:	e7c4      	b.n	8002d0e <_printf_common+0x62>
 8002d84:	2301      	movs	r3, #1
 8002d86:	4622      	mov	r2, r4
 8002d88:	4639      	mov	r1, r7
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	47c0      	blx	r8
 8002d8e:	3001      	adds	r0, #1
 8002d90:	d0e6      	beq.n	8002d60 <_printf_common+0xb4>
 8002d92:	f109 0901 	add.w	r9, r9, #1
 8002d96:	e7d8      	b.n	8002d4a <_printf_common+0x9e>

08002d98 <_printf_i>:
 8002d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002da0:	460c      	mov	r4, r1
 8002da2:	7e09      	ldrb	r1, [r1, #24]
 8002da4:	b085      	sub	sp, #20
 8002da6:	296e      	cmp	r1, #110	; 0x6e
 8002da8:	4617      	mov	r7, r2
 8002daa:	4606      	mov	r6, r0
 8002dac:	4698      	mov	r8, r3
 8002dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002db0:	f000 80b3 	beq.w	8002f1a <_printf_i+0x182>
 8002db4:	d822      	bhi.n	8002dfc <_printf_i+0x64>
 8002db6:	2963      	cmp	r1, #99	; 0x63
 8002db8:	d036      	beq.n	8002e28 <_printf_i+0x90>
 8002dba:	d80a      	bhi.n	8002dd2 <_printf_i+0x3a>
 8002dbc:	2900      	cmp	r1, #0
 8002dbe:	f000 80b9 	beq.w	8002f34 <_printf_i+0x19c>
 8002dc2:	2958      	cmp	r1, #88	; 0x58
 8002dc4:	f000 8083 	beq.w	8002ece <_printf_i+0x136>
 8002dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002dd0:	e032      	b.n	8002e38 <_printf_i+0xa0>
 8002dd2:	2964      	cmp	r1, #100	; 0x64
 8002dd4:	d001      	beq.n	8002dda <_printf_i+0x42>
 8002dd6:	2969      	cmp	r1, #105	; 0x69
 8002dd8:	d1f6      	bne.n	8002dc8 <_printf_i+0x30>
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	6813      	ldr	r3, [r2, #0]
 8002dde:	0605      	lsls	r5, r0, #24
 8002de0:	f103 0104 	add.w	r1, r3, #4
 8002de4:	d52a      	bpl.n	8002e3c <_printf_i+0xa4>
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6011      	str	r1, [r2, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	da03      	bge.n	8002df6 <_printf_i+0x5e>
 8002dee:	222d      	movs	r2, #45	; 0x2d
 8002df0:	425b      	negs	r3, r3
 8002df2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002df6:	486f      	ldr	r0, [pc, #444]	; (8002fb4 <_printf_i+0x21c>)
 8002df8:	220a      	movs	r2, #10
 8002dfa:	e039      	b.n	8002e70 <_printf_i+0xd8>
 8002dfc:	2973      	cmp	r1, #115	; 0x73
 8002dfe:	f000 809d 	beq.w	8002f3c <_printf_i+0x1a4>
 8002e02:	d808      	bhi.n	8002e16 <_printf_i+0x7e>
 8002e04:	296f      	cmp	r1, #111	; 0x6f
 8002e06:	d020      	beq.n	8002e4a <_printf_i+0xb2>
 8002e08:	2970      	cmp	r1, #112	; 0x70
 8002e0a:	d1dd      	bne.n	8002dc8 <_printf_i+0x30>
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	f043 0320 	orr.w	r3, r3, #32
 8002e12:	6023      	str	r3, [r4, #0]
 8002e14:	e003      	b.n	8002e1e <_printf_i+0x86>
 8002e16:	2975      	cmp	r1, #117	; 0x75
 8002e18:	d017      	beq.n	8002e4a <_printf_i+0xb2>
 8002e1a:	2978      	cmp	r1, #120	; 0x78
 8002e1c:	d1d4      	bne.n	8002dc8 <_printf_i+0x30>
 8002e1e:	2378      	movs	r3, #120	; 0x78
 8002e20:	4865      	ldr	r0, [pc, #404]	; (8002fb8 <_printf_i+0x220>)
 8002e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e26:	e055      	b.n	8002ed4 <_printf_i+0x13c>
 8002e28:	6813      	ldr	r3, [r2, #0]
 8002e2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e2e:	1d19      	adds	r1, r3, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6011      	str	r1, [r2, #0]
 8002e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e08c      	b.n	8002f56 <_printf_i+0x1be>
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e42:	6011      	str	r1, [r2, #0]
 8002e44:	bf18      	it	ne
 8002e46:	b21b      	sxthne	r3, r3
 8002e48:	e7cf      	b.n	8002dea <_printf_i+0x52>
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	6825      	ldr	r5, [r4, #0]
 8002e4e:	1d18      	adds	r0, r3, #4
 8002e50:	6010      	str	r0, [r2, #0]
 8002e52:	0628      	lsls	r0, r5, #24
 8002e54:	d501      	bpl.n	8002e5a <_printf_i+0xc2>
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	e002      	b.n	8002e60 <_printf_i+0xc8>
 8002e5a:	0668      	lsls	r0, r5, #25
 8002e5c:	d5fb      	bpl.n	8002e56 <_printf_i+0xbe>
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	296f      	cmp	r1, #111	; 0x6f
 8002e62:	bf14      	ite	ne
 8002e64:	220a      	movne	r2, #10
 8002e66:	2208      	moveq	r2, #8
 8002e68:	4852      	ldr	r0, [pc, #328]	; (8002fb4 <_printf_i+0x21c>)
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e70:	6865      	ldr	r5, [r4, #4]
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	60a5      	str	r5, [r4, #8]
 8002e76:	f2c0 8095 	blt.w	8002fa4 <_printf_i+0x20c>
 8002e7a:	6821      	ldr	r1, [r4, #0]
 8002e7c:	f021 0104 	bic.w	r1, r1, #4
 8002e80:	6021      	str	r1, [r4, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d13d      	bne.n	8002f02 <_printf_i+0x16a>
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	f040 808e 	bne.w	8002fa8 <_printf_i+0x210>
 8002e8c:	4665      	mov	r5, ip
 8002e8e:	2a08      	cmp	r2, #8
 8002e90:	d10b      	bne.n	8002eaa <_printf_i+0x112>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	07db      	lsls	r3, r3, #31
 8002e96:	d508      	bpl.n	8002eaa <_printf_i+0x112>
 8002e98:	6923      	ldr	r3, [r4, #16]
 8002e9a:	6862      	ldr	r2, [r4, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bfde      	ittt	le
 8002ea0:	2330      	movle	r3, #48	; 0x30
 8002ea2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ea6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002eaa:	ebac 0305 	sub.w	r3, ip, r5
 8002eae:	6123      	str	r3, [r4, #16]
 8002eb0:	f8cd 8000 	str.w	r8, [sp]
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	aa03      	add	r2, sp, #12
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f7ff fef6 	bl	8002cac <_printf_common>
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d14d      	bne.n	8002f60 <_printf_i+0x1c8>
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	b005      	add	sp, #20
 8002eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ece:	4839      	ldr	r0, [pc, #228]	; (8002fb4 <_printf_i+0x21c>)
 8002ed0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	6821      	ldr	r1, [r4, #0]
 8002ed8:	1d1d      	adds	r5, r3, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6015      	str	r5, [r2, #0]
 8002ede:	060a      	lsls	r2, r1, #24
 8002ee0:	d50b      	bpl.n	8002efa <_printf_i+0x162>
 8002ee2:	07ca      	lsls	r2, r1, #31
 8002ee4:	bf44      	itt	mi
 8002ee6:	f041 0120 	orrmi.w	r1, r1, #32
 8002eea:	6021      	strmi	r1, [r4, #0]
 8002eec:	b91b      	cbnz	r3, 8002ef6 <_printf_i+0x15e>
 8002eee:	6822      	ldr	r2, [r4, #0]
 8002ef0:	f022 0220 	bic.w	r2, r2, #32
 8002ef4:	6022      	str	r2, [r4, #0]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	e7b7      	b.n	8002e6a <_printf_i+0xd2>
 8002efa:	064d      	lsls	r5, r1, #25
 8002efc:	bf48      	it	mi
 8002efe:	b29b      	uxthmi	r3, r3
 8002f00:	e7ef      	b.n	8002ee2 <_printf_i+0x14a>
 8002f02:	4665      	mov	r5, ip
 8002f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f08:	fb02 3311 	mls	r3, r2, r1, r3
 8002f0c:	5cc3      	ldrb	r3, [r0, r3]
 8002f0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f12:	460b      	mov	r3, r1
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d1f5      	bne.n	8002f04 <_printf_i+0x16c>
 8002f18:	e7b9      	b.n	8002e8e <_printf_i+0xf6>
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	6825      	ldr	r5, [r4, #0]
 8002f1e:	1d18      	adds	r0, r3, #4
 8002f20:	6961      	ldr	r1, [r4, #20]
 8002f22:	6010      	str	r0, [r2, #0]
 8002f24:	0628      	lsls	r0, r5, #24
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	d501      	bpl.n	8002f2e <_printf_i+0x196>
 8002f2a:	6019      	str	r1, [r3, #0]
 8002f2c:	e002      	b.n	8002f34 <_printf_i+0x19c>
 8002f2e:	066a      	lsls	r2, r5, #25
 8002f30:	d5fb      	bpl.n	8002f2a <_printf_i+0x192>
 8002f32:	8019      	strh	r1, [r3, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	4665      	mov	r5, ip
 8002f38:	6123      	str	r3, [r4, #16]
 8002f3a:	e7b9      	b.n	8002eb0 <_printf_i+0x118>
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	1d19      	adds	r1, r3, #4
 8002f40:	6011      	str	r1, [r2, #0]
 8002f42:	681d      	ldr	r5, [r3, #0]
 8002f44:	6862      	ldr	r2, [r4, #4]
 8002f46:	2100      	movs	r1, #0
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f000 f837 	bl	8002fbc <memchr>
 8002f4e:	b108      	cbz	r0, 8002f54 <_printf_i+0x1bc>
 8002f50:	1b40      	subs	r0, r0, r5
 8002f52:	6060      	str	r0, [r4, #4]
 8002f54:	6863      	ldr	r3, [r4, #4]
 8002f56:	6123      	str	r3, [r4, #16]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f5e:	e7a7      	b.n	8002eb0 <_printf_i+0x118>
 8002f60:	6923      	ldr	r3, [r4, #16]
 8002f62:	462a      	mov	r2, r5
 8002f64:	4639      	mov	r1, r7
 8002f66:	4630      	mov	r0, r6
 8002f68:	47c0      	blx	r8
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d0aa      	beq.n	8002ec4 <_printf_i+0x12c>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	079b      	lsls	r3, r3, #30
 8002f72:	d413      	bmi.n	8002f9c <_printf_i+0x204>
 8002f74:	68e0      	ldr	r0, [r4, #12]
 8002f76:	9b03      	ldr	r3, [sp, #12]
 8002f78:	4298      	cmp	r0, r3
 8002f7a:	bfb8      	it	lt
 8002f7c:	4618      	movlt	r0, r3
 8002f7e:	e7a3      	b.n	8002ec8 <_printf_i+0x130>
 8002f80:	2301      	movs	r3, #1
 8002f82:	464a      	mov	r2, r9
 8002f84:	4639      	mov	r1, r7
 8002f86:	4630      	mov	r0, r6
 8002f88:	47c0      	blx	r8
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d09a      	beq.n	8002ec4 <_printf_i+0x12c>
 8002f8e:	3501      	adds	r5, #1
 8002f90:	68e3      	ldr	r3, [r4, #12]
 8002f92:	9a03      	ldr	r2, [sp, #12]
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	42ab      	cmp	r3, r5
 8002f98:	dcf2      	bgt.n	8002f80 <_printf_i+0x1e8>
 8002f9a:	e7eb      	b.n	8002f74 <_printf_i+0x1dc>
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	f104 0919 	add.w	r9, r4, #25
 8002fa2:	e7f5      	b.n	8002f90 <_printf_i+0x1f8>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ac      	bne.n	8002f02 <_printf_i+0x16a>
 8002fa8:	7803      	ldrb	r3, [r0, #0]
 8002faa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fb2:	e76c      	b.n	8002e8e <_printf_i+0xf6>
 8002fb4:	0800348d 	.word	0x0800348d
 8002fb8:	0800349e 	.word	0x0800349e

08002fbc <memchr>:
 8002fbc:	b510      	push	{r4, lr}
 8002fbe:	b2c9      	uxtb	r1, r1
 8002fc0:	4402      	add	r2, r0
 8002fc2:	4290      	cmp	r0, r2
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	d101      	bne.n	8002fcc <memchr+0x10>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e003      	b.n	8002fd4 <memchr+0x18>
 8002fcc:	781c      	ldrb	r4, [r3, #0]
 8002fce:	3001      	adds	r0, #1
 8002fd0:	428c      	cmp	r4, r1
 8002fd2:	d1f6      	bne.n	8002fc2 <memchr+0x6>
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd10      	pop	{r4, pc}

08002fd8 <memcpy>:
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	1e43      	subs	r3, r0, #1
 8002fdc:	440a      	add	r2, r1
 8002fde:	4291      	cmp	r1, r2
 8002fe0:	d100      	bne.n	8002fe4 <memcpy+0xc>
 8002fe2:	bd10      	pop	{r4, pc}
 8002fe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fec:	e7f7      	b.n	8002fde <memcpy+0x6>

08002fee <memmove>:
 8002fee:	4288      	cmp	r0, r1
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	eb01 0302 	add.w	r3, r1, r2
 8002ff6:	d807      	bhi.n	8003008 <memmove+0x1a>
 8002ff8:	1e42      	subs	r2, r0, #1
 8002ffa:	4299      	cmp	r1, r3
 8002ffc:	d00a      	beq.n	8003014 <memmove+0x26>
 8002ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003002:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003006:	e7f8      	b.n	8002ffa <memmove+0xc>
 8003008:	4283      	cmp	r3, r0
 800300a:	d9f5      	bls.n	8002ff8 <memmove+0xa>
 800300c:	1881      	adds	r1, r0, r2
 800300e:	1ad2      	subs	r2, r2, r3
 8003010:	42d3      	cmn	r3, r2
 8003012:	d100      	bne.n	8003016 <memmove+0x28>
 8003014:	bd10      	pop	{r4, pc}
 8003016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800301a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800301e:	e7f7      	b.n	8003010 <memmove+0x22>

08003020 <_free_r>:
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	4605      	mov	r5, r0
 8003024:	2900      	cmp	r1, #0
 8003026:	d043      	beq.n	80030b0 <_free_r+0x90>
 8003028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800302c:	1f0c      	subs	r4, r1, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	bfb8      	it	lt
 8003032:	18e4      	addlt	r4, r4, r3
 8003034:	f000 f8d0 	bl	80031d8 <__malloc_lock>
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <_free_r+0x94>)
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	4610      	mov	r0, r2
 800303e:	b933      	cbnz	r3, 800304e <_free_r+0x2e>
 8003040:	6063      	str	r3, [r4, #4]
 8003042:	6014      	str	r4, [r2, #0]
 8003044:	4628      	mov	r0, r5
 8003046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800304a:	f000 b8c6 	b.w	80031da <__malloc_unlock>
 800304e:	42a3      	cmp	r3, r4
 8003050:	d90b      	bls.n	800306a <_free_r+0x4a>
 8003052:	6821      	ldr	r1, [r4, #0]
 8003054:	1862      	adds	r2, r4, r1
 8003056:	4293      	cmp	r3, r2
 8003058:	bf01      	itttt	eq
 800305a:	681a      	ldreq	r2, [r3, #0]
 800305c:	685b      	ldreq	r3, [r3, #4]
 800305e:	1852      	addeq	r2, r2, r1
 8003060:	6022      	streq	r2, [r4, #0]
 8003062:	6063      	str	r3, [r4, #4]
 8003064:	6004      	str	r4, [r0, #0]
 8003066:	e7ed      	b.n	8003044 <_free_r+0x24>
 8003068:	4613      	mov	r3, r2
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	b10a      	cbz	r2, 8003072 <_free_r+0x52>
 800306e:	42a2      	cmp	r2, r4
 8003070:	d9fa      	bls.n	8003068 <_free_r+0x48>
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	1858      	adds	r0, r3, r1
 8003076:	42a0      	cmp	r0, r4
 8003078:	d10b      	bne.n	8003092 <_free_r+0x72>
 800307a:	6820      	ldr	r0, [r4, #0]
 800307c:	4401      	add	r1, r0
 800307e:	1858      	adds	r0, r3, r1
 8003080:	4282      	cmp	r2, r0
 8003082:	6019      	str	r1, [r3, #0]
 8003084:	d1de      	bne.n	8003044 <_free_r+0x24>
 8003086:	6810      	ldr	r0, [r2, #0]
 8003088:	6852      	ldr	r2, [r2, #4]
 800308a:	4401      	add	r1, r0
 800308c:	6019      	str	r1, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	e7d8      	b.n	8003044 <_free_r+0x24>
 8003092:	d902      	bls.n	800309a <_free_r+0x7a>
 8003094:	230c      	movs	r3, #12
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	e7d4      	b.n	8003044 <_free_r+0x24>
 800309a:	6820      	ldr	r0, [r4, #0]
 800309c:	1821      	adds	r1, r4, r0
 800309e:	428a      	cmp	r2, r1
 80030a0:	bf01      	itttt	eq
 80030a2:	6811      	ldreq	r1, [r2, #0]
 80030a4:	6852      	ldreq	r2, [r2, #4]
 80030a6:	1809      	addeq	r1, r1, r0
 80030a8:	6021      	streq	r1, [r4, #0]
 80030aa:	6062      	str	r2, [r4, #4]
 80030ac:	605c      	str	r4, [r3, #4]
 80030ae:	e7c9      	b.n	8003044 <_free_r+0x24>
 80030b0:	bd38      	pop	{r3, r4, r5, pc}
 80030b2:	bf00      	nop
 80030b4:	20000090 	.word	0x20000090

080030b8 <_malloc_r>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	1ccd      	adds	r5, r1, #3
 80030bc:	f025 0503 	bic.w	r5, r5, #3
 80030c0:	3508      	adds	r5, #8
 80030c2:	2d0c      	cmp	r5, #12
 80030c4:	bf38      	it	cc
 80030c6:	250c      	movcc	r5, #12
 80030c8:	2d00      	cmp	r5, #0
 80030ca:	4606      	mov	r6, r0
 80030cc:	db01      	blt.n	80030d2 <_malloc_r+0x1a>
 80030ce:	42a9      	cmp	r1, r5
 80030d0:	d903      	bls.n	80030da <_malloc_r+0x22>
 80030d2:	230c      	movs	r3, #12
 80030d4:	6033      	str	r3, [r6, #0]
 80030d6:	2000      	movs	r0, #0
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
 80030da:	f000 f87d 	bl	80031d8 <__malloc_lock>
 80030de:	4a21      	ldr	r2, [pc, #132]	; (8003164 <_malloc_r+0xac>)
 80030e0:	6814      	ldr	r4, [r2, #0]
 80030e2:	4621      	mov	r1, r4
 80030e4:	b991      	cbnz	r1, 800310c <_malloc_r+0x54>
 80030e6:	4c20      	ldr	r4, [pc, #128]	; (8003168 <_malloc_r+0xb0>)
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	b91b      	cbnz	r3, 80030f4 <_malloc_r+0x3c>
 80030ec:	4630      	mov	r0, r6
 80030ee:	f000 f863 	bl	80031b8 <_sbrk_r>
 80030f2:	6020      	str	r0, [r4, #0]
 80030f4:	4629      	mov	r1, r5
 80030f6:	4630      	mov	r0, r6
 80030f8:	f000 f85e 	bl	80031b8 <_sbrk_r>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d124      	bne.n	800314a <_malloc_r+0x92>
 8003100:	230c      	movs	r3, #12
 8003102:	4630      	mov	r0, r6
 8003104:	6033      	str	r3, [r6, #0]
 8003106:	f000 f868 	bl	80031da <__malloc_unlock>
 800310a:	e7e4      	b.n	80030d6 <_malloc_r+0x1e>
 800310c:	680b      	ldr	r3, [r1, #0]
 800310e:	1b5b      	subs	r3, r3, r5
 8003110:	d418      	bmi.n	8003144 <_malloc_r+0x8c>
 8003112:	2b0b      	cmp	r3, #11
 8003114:	d90f      	bls.n	8003136 <_malloc_r+0x7e>
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	18cc      	adds	r4, r1, r3
 800311a:	50cd      	str	r5, [r1, r3]
 800311c:	4630      	mov	r0, r6
 800311e:	f000 f85c 	bl	80031da <__malloc_unlock>
 8003122:	f104 000b 	add.w	r0, r4, #11
 8003126:	1d23      	adds	r3, r4, #4
 8003128:	f020 0007 	bic.w	r0, r0, #7
 800312c:	1ac3      	subs	r3, r0, r3
 800312e:	d0d3      	beq.n	80030d8 <_malloc_r+0x20>
 8003130:	425a      	negs	r2, r3
 8003132:	50e2      	str	r2, [r4, r3]
 8003134:	e7d0      	b.n	80030d8 <_malloc_r+0x20>
 8003136:	684b      	ldr	r3, [r1, #4]
 8003138:	428c      	cmp	r4, r1
 800313a:	bf16      	itet	ne
 800313c:	6063      	strne	r3, [r4, #4]
 800313e:	6013      	streq	r3, [r2, #0]
 8003140:	460c      	movne	r4, r1
 8003142:	e7eb      	b.n	800311c <_malloc_r+0x64>
 8003144:	460c      	mov	r4, r1
 8003146:	6849      	ldr	r1, [r1, #4]
 8003148:	e7cc      	b.n	80030e4 <_malloc_r+0x2c>
 800314a:	1cc4      	adds	r4, r0, #3
 800314c:	f024 0403 	bic.w	r4, r4, #3
 8003150:	42a0      	cmp	r0, r4
 8003152:	d005      	beq.n	8003160 <_malloc_r+0xa8>
 8003154:	1a21      	subs	r1, r4, r0
 8003156:	4630      	mov	r0, r6
 8003158:	f000 f82e 	bl	80031b8 <_sbrk_r>
 800315c:	3001      	adds	r0, #1
 800315e:	d0cf      	beq.n	8003100 <_malloc_r+0x48>
 8003160:	6025      	str	r5, [r4, #0]
 8003162:	e7db      	b.n	800311c <_malloc_r+0x64>
 8003164:	20000090 	.word	0x20000090
 8003168:	20000094 	.word	0x20000094

0800316c <_realloc_r>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	4607      	mov	r7, r0
 8003170:	4614      	mov	r4, r2
 8003172:	460e      	mov	r6, r1
 8003174:	b921      	cbnz	r1, 8003180 <_realloc_r+0x14>
 8003176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800317a:	4611      	mov	r1, r2
 800317c:	f7ff bf9c 	b.w	80030b8 <_malloc_r>
 8003180:	b922      	cbnz	r2, 800318c <_realloc_r+0x20>
 8003182:	f7ff ff4d 	bl	8003020 <_free_r>
 8003186:	4625      	mov	r5, r4
 8003188:	4628      	mov	r0, r5
 800318a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800318c:	f000 f826 	bl	80031dc <_malloc_usable_size_r>
 8003190:	42a0      	cmp	r0, r4
 8003192:	d20f      	bcs.n	80031b4 <_realloc_r+0x48>
 8003194:	4621      	mov	r1, r4
 8003196:	4638      	mov	r0, r7
 8003198:	f7ff ff8e 	bl	80030b8 <_malloc_r>
 800319c:	4605      	mov	r5, r0
 800319e:	2800      	cmp	r0, #0
 80031a0:	d0f2      	beq.n	8003188 <_realloc_r+0x1c>
 80031a2:	4631      	mov	r1, r6
 80031a4:	4622      	mov	r2, r4
 80031a6:	f7ff ff17 	bl	8002fd8 <memcpy>
 80031aa:	4631      	mov	r1, r6
 80031ac:	4638      	mov	r0, r7
 80031ae:	f7ff ff37 	bl	8003020 <_free_r>
 80031b2:	e7e9      	b.n	8003188 <_realloc_r+0x1c>
 80031b4:	4635      	mov	r5, r6
 80031b6:	e7e7      	b.n	8003188 <_realloc_r+0x1c>

080031b8 <_sbrk_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	2300      	movs	r3, #0
 80031bc:	4c05      	ldr	r4, [pc, #20]	; (80031d4 <_sbrk_r+0x1c>)
 80031be:	4605      	mov	r5, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	6023      	str	r3, [r4, #0]
 80031c4:	f7fd fcc6 	bl	8000b54 <_sbrk>
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	d102      	bne.n	80031d2 <_sbrk_r+0x1a>
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	b103      	cbz	r3, 80031d2 <_sbrk_r+0x1a>
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	bd38      	pop	{r3, r4, r5, pc}
 80031d4:	20000100 	.word	0x20000100

080031d8 <__malloc_lock>:
 80031d8:	4770      	bx	lr

080031da <__malloc_unlock>:
 80031da:	4770      	bx	lr

080031dc <_malloc_usable_size_r>:
 80031dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031e0:	1f18      	subs	r0, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bfbc      	itt	lt
 80031e6:	580b      	ldrlt	r3, [r1, r0]
 80031e8:	18c0      	addlt	r0, r0, r3
 80031ea:	4770      	bx	lr

080031ec <_init>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr

080031f8 <_fini>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	bf00      	nop
 80031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fe:	bc08      	pop	{r3}
 8003200:	469e      	mov	lr, r3
 8003202:	4770      	bx	lr
